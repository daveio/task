# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tty-command` gem.
# Please instead update this file by running `bin/tapioca gem tty-command`.


# source://tty-command//lib/tty/command/cmd.rb#6
module TTY; end

# source://tty-command//lib/tty/command/cmd.rb#7
class TTY::Command
  # Initialize a Command object
  #
  # @api public
  # @option options
  # @option options
  # @option options
  # @param options [Hash]
  # @return [Command] a new instance of Command
  #
  # source://tty-command//lib/tty/command.rb#54
  def initialize(**options); end

  # Check if in dry mode
  #
  # @return [Boolean]
  #
  # source://tty-command//lib/tty/command.rb#168
  def dry_run?; end

  # Returns the value of attribute printer.
  #
  # source://tty-command//lib/tty/command.rb#41
  def printer; end

  # Run Ruby interperter with the given arguments
  #
  # @api public
  # @example
  #   ruby %q{-e "puts 'Hello world'"}
  #
  # source://tty-command//lib/tty/command.rb#154
  def ruby(*args, &block); end

  # Start external executable in a child process
  #
  # @api public
  # @example
  #   cmd.run(command, [argv1, ..., argvN], [options])
  # @example
  #   cmd.run(command, ...) do |result|
  #   ...
  #   end
  # @option options
  # @option options
  # @option options
  # @param command [String] the command to run
  # @param argv [Array[String]] an array of string arguments
  # @param options [Hash] hash of operations to perform
  # @raise [ExitError] raised when command exits with non-zero code
  # @yield [out, err] Yields stdout and stderr output whenever available
  #
  # source://tty-command//lib/tty/command.rb#102
  def run(*args, &block); end

  # Start external executable without raising ExitError
  #
  # @api public
  # @example
  #   cmd.run!(command, [argv1, ..., argvN], [options])
  #
  # source://tty-command//lib/tty/command.rb#117
  def run!(*args, &block); end

  # Execute shell test command
  #
  # @api public
  #
  # source://tty-command//lib/tty/command.rb#144
  def test(*args); end

  # Wait on long running script until output matches a specific pattern
  #
  # @api public
  # @example
  #   cmd.wait 'tail -f /var/log/php.log', /something happened/
  #
  # source://tty-command//lib/tty/command.rb#128
  def wait(*args); end

  private

  # @api private
  #
  # source://tty-command//lib/tty/command.rb#175
  def command(*args); end

  # @api private
  #
  # source://tty-command//lib/tty/command.rb#182
  def execute_command(cmd, &block); end

  # Find printer class or fail
  #
  # @api private
  # @raise [ArgumentError]
  #
  # source://tty-command//lib/tty/command.rb#206
  def find_printer_class(name); end

  # @api private
  #
  # source://tty-command//lib/tty/command.rb#215
  def select_runner(dry_run); end

  # @api private
  #
  # source://tty-command//lib/tty/command.rb#189
  def use_printer(class_or_name, options); end

  class << self
    # source://tty-command//lib/tty/command.rb#29
    def record_separator; end

    # source://tty-command//lib/tty/command.rb#33
    def record_separator=(sep); end

    # @return [Boolean]
    #
    # source://tty-command//lib/tty/command.rb#37
    def windows?; end
  end
end

# source://tty-command//lib/tty/command/child_process.rb#9
module TTY::Command::ChildProcess
  private

  # Close all streams
  #
  # @api private
  #
  # source://tty-command//lib/tty/command/child_process.rb#88
  def close_fds(*fds); end

  # Convert option pari to recognized spawn option pair
  #
  # @api private
  #
  # source://tty-command//lib/tty/command/child_process.rb#131
  def convert(spawn_key, spawn_value); end

  # Convert file name to file handle
  #
  # @api private
  #
  # source://tty-command//lib/tty/command/child_process.rb#191
  def convert_to_fd(object); end

  # Determine if object is a fd
  #
  # @api private
  # @return [Boolean]
  #
  # source://tty-command//lib/tty/command/child_process.rb#152
  def fd?(object); end

  # Convert fd to name :in, :out, :err
  #
  # @api private
  #
  # source://tty-command//lib/tty/command/child_process.rb#168
  def fd_to_process_key(object); end

  # Normalize spawn fd into :in, :out, :err keys.
  #
  # @api private
  # @return [Hash]
  #
  # source://tty-command//lib/tty/command/child_process.rb#112
  def normalize_redirect_options(options); end

  # Execute command in a child process with all IO streams piped
  # in and out. The interface is similar to Process.spawn
  #
  # The caller should ensure that all IO objects are closed
  # when the child process is finished. However, when block
  # is provided this will be taken care of automatically.
  #
  # @api public
  # @param cmd [Cmd] the command to spawn
  # @return [pid, stdin, stdout, stderr]
  #
  # source://tty-command//lib/tty/command/child_process.rb#23
  def spawn(cmd); end

  # Try loading pty module
  #
  # @api private
  # @return [Boolean]
  #
  # source://tty-command//lib/tty/command/child_process.rb#98
  def try_loading_pty(verbose = T.unsafe(nil)); end

  # Attempts to read object content
  #
  # @api private
  #
  # source://tty-command//lib/tty/command/child_process.rb#209
  def try_reading(object); end

  class << self
    # Close all streams
    #
    # @api private
    #
    # source://tty-command//lib/tty/command/child_process.rb#88
    def close_fds(*fds); end

    # Convert option pari to recognized spawn option pair
    #
    # @api private
    #
    # source://tty-command//lib/tty/command/child_process.rb#131
    def convert(spawn_key, spawn_value); end

    # Convert file name to file handle
    #
    # @api private
    #
    # source://tty-command//lib/tty/command/child_process.rb#191
    def convert_to_fd(object); end

    # Determine if object is a fd
    #
    # @api private
    # @return [Boolean]
    #
    # source://tty-command//lib/tty/command/child_process.rb#152
    def fd?(object); end

    # Convert fd to name :in, :out, :err
    #
    # @api private
    #
    # source://tty-command//lib/tty/command/child_process.rb#168
    def fd_to_process_key(object); end

    # Normalize spawn fd into :in, :out, :err keys.
    #
    # @api private
    # @return [Hash]
    #
    # source://tty-command//lib/tty/command/child_process.rb#112
    def normalize_redirect_options(options); end

    # Execute command in a child process with all IO streams piped
    # in and out. The interface is similar to Process.spawn
    #
    # The caller should ensure that all IO objects are closed
    # when the child process is finished. However, when block
    # is provided this will be taken care of automatically.
    #
    # @api public
    # @param cmd [Cmd] the command to spawn
    # @return [pid, stdin, stdout, stderr]
    #
    # source://tty-command//lib/tty/command/child_process.rb#23
    def spawn(cmd); end

    # Try loading pty module
    #
    # @api private
    # @return [Boolean]
    #
    # source://tty-command//lib/tty/command/child_process.rb#98
    def try_loading_pty(verbose = T.unsafe(nil)); end

    # Attempts to read object content
    #
    # @api private
    #
    # source://tty-command//lib/tty/command/child_process.rb#209
    def try_reading(object); end
  end
end

# Encapsulates the executed command
#
# @api private
#
# source://tty-command//lib/tty/command/cmd.rb#11
class TTY::Command::Cmd
  # Initialize a new Cmd object
  #
  # @api private
  # @return [Cmd] a new instance of Cmd
  #
  # source://tty-command//lib/tty/command/cmd.rb#34
  def initialize(env_or_cmd, *args); end

  # A string arguments
  #
  # @api public
  #
  # source://tty-command//lib/tty/command/cmd.rb#18
  def argv; end

  # @api private
  #
  # source://tty-command//lib/tty/command/cmd.rb#101
  def chdir(value); end

  # A string command name, or shell program
  #
  # @api public
  #
  # source://tty-command//lib/tty/command/cmd.rb#14
  def command; end

  # The shell environment variables
  #
  # @api public
  #
  # source://tty-command//lib/tty/command/cmd.rb#77
  def environment; end

  # @api private
  #
  # source://tty-command//lib/tty/command/cmd.rb#81
  def environment_string; end

  # @api private
  #
  # source://tty-command//lib/tty/command/cmd.rb#89
  def evars(value, &block); end

  # @api private
  #
  # source://tty-command//lib/tty/command/cmd.rb#114
  def group(value); end

  # Flag that controls whether to print the output only on error or not
  #
  # @api private
  #
  # source://tty-command//lib/tty/command/cmd.rb#29
  def only_output_on_error; end

  # Hash of operations to peform
  #
  # @api public
  #
  # source://tty-command//lib/tty/command/cmd.rb#22
  def options; end

  # Assemble full command
  #
  # @api public
  #
  # source://tty-command//lib/tty/command/cmd.rb#129
  def to_command; end

  # @api public
  #
  # source://tty-command//lib/tty/command/cmd.rb#139
  def to_hash; end

  # @api public
  #
  # source://tty-command//lib/tty/command/cmd.rb#134
  def to_s; end

  # @api private
  #
  # source://tty-command//lib/tty/command/cmd.rb#95
  def umask(value); end

  # Extend command options if keys don't already exist
  #
  # @api public
  #
  # source://tty-command//lib/tty/command/cmd.rb#70
  def update(options); end

  # @api private
  #
  # source://tty-command//lib/tty/command/cmd.rb#107
  def user(value); end

  # Unique identifier
  #
  # @api public
  #
  # source://tty-command//lib/tty/command/cmd.rb#26
  def uuid; end

  # Clear environment variables except specified by env
  #
  # @api public
  #
  # source://tty-command//lib/tty/command/cmd.rb#123
  def with_clean_env; end

  private

  # Coerce to string
  #
  # @api private
  #
  # source://tty-command//lib/tty/command/cmd.rb#152
  def sanitize(value); end
end

# source://tty-command//lib/tty/command/dry_runner.rb#7
class TTY::Command::DryRunner
  # @return [DryRunner] a new instance of DryRunner
  #
  # source://tty-command//lib/tty/command/dry_runner.rb#10
  def initialize(cmd, printer); end

  # Returns the value of attribute cmd.
  #
  # source://tty-command//lib/tty/command/dry_runner.rb#8
  def cmd; end

  # Show command without running
  #
  # @api public
  #
  # source://tty-command//lib/tty/command/dry_runner.rb#18
  def run!(*_arg0); end
end

# source://tty-command//lib/tty/command.rb#17
class TTY::Command::ExecuteError < ::StandardError; end

# An ExitError reports an unsuccessful exit by command.
#
# The error message includes:
#  * the name of command executed
#  * the exit status
#  * stdout bytes
#  * stderr bytes
#
# @api private
#
# source://tty-command//lib/tty/command/exit_error.rb#14
class TTY::Command::ExitError < ::RuntimeError
  # @api private
  # @return [ExitError] a new instance of ExitError
  #
  # source://tty-command//lib/tty/command/exit_error.rb#15
  def initialize(cmd_name, result); end

  # @api private
  #
  # source://tty-command//lib/tty/command/exit_error.rb#26
  def extract_output(value); end

  # @api private
  #
  # source://tty-command//lib/tty/command/exit_error.rb#19
  def info(cmd_name, result); end
end

# source://tty-command//lib/tty/command/printers/abstract.rb#5
module TTY::Command::Printers; end

# source://tty-command//lib/tty/command/printers/abstract.rb#6
class TTY::Command::Printers::Abstract
  extend ::Forwardable

  # Initialize a Printer object
  #
  # @api public
  # @param output [IO] the printer output
  # @return [Abstract] a new instance of Abstract
  #
  # source://tty-command//lib/tty/command/printers/abstract.rb#20
  def initialize(output, options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def decorate(*args, **_arg1, &block); end

  # Returns the value of attribute err_data.
  #
  # source://tty-command//lib/tty/command/printers/abstract.rb#12
  def err_data; end

  # Sets the attribute err_data
  #
  # @param value the value to set the attribute err_data to.
  #
  # source://tty-command//lib/tty/command/printers/abstract.rb#12
  def err_data=(_arg0); end

  # Returns the value of attribute options.
  #
  # source://tty-command//lib/tty/command/printers/abstract.rb#11
  def options; end

  # Returns the value of attribute out_data.
  #
  # source://tty-command//lib/tty/command/printers/abstract.rb#12
  def out_data; end

  # Sets the attribute out_data
  #
  # @param value the value to set the attribute out_data to.
  #
  # source://tty-command//lib/tty/command/printers/abstract.rb#12
  def out_data=(_arg0); end

  # Returns the value of attribute output.
  #
  # source://tty-command//lib/tty/command/printers/abstract.rb#11
  def output; end

  # source://tty-command//lib/tty/command/printers/abstract.rb#38
  def print_command_err_data(cmd, *args); end

  # source://tty-command//lib/tty/command/printers/abstract.rb#42
  def print_command_exit(cmd, *args); end

  # source://tty-command//lib/tty/command/printers/abstract.rb#34
  def print_command_out_data(cmd, *args); end

  # source://tty-command//lib/tty/command/printers/abstract.rb#30
  def print_command_start(cmd, *args); end

  # @raise [NotImplemented]
  #
  # source://tty-command//lib/tty/command/printers/abstract.rb#46
  def write(cmd, message); end
end

# source://tty-command//lib/tty/command/printers/null.rb#6
class TTY::Command::Printers::Null < ::TTY::Command::Printers::Abstract
  # source://tty-command//lib/tty/command/printers/null.rb#7
  def write(*_arg0); end
end

# source://tty-command//lib/tty/command/printers/pretty.rb#6
class TTY::Command::Printers::Pretty < ::TTY::Command::Printers::Abstract
  # @return [Pretty] a new instance of Pretty
  #
  # source://tty-command//lib/tty/command/printers/pretty.rb#9
  def initialize(*_arg0); end

  # source://tty-command//lib/tty/command/printers/pretty.rb#25
  def print_command_err_data(cmd, *args); end

  # source://tty-command//lib/tty/command/printers/pretty.rb#30
  def print_command_exit(cmd, status, runtime, *args); end

  # source://tty-command//lib/tty/command/printers/pretty.rb#20
  def print_command_out_data(cmd, *args); end

  # source://tty-command//lib/tty/command/printers/pretty.rb#14
  def print_command_start(cmd, *args); end

  # Write message out to output
  #
  # @api private
  #
  # source://tty-command//lib/tty/command/printers/pretty.rb#46
  def write(cmd, message, data = T.unsafe(nil)); end

  private

  # Pluralize word based on a count
  #
  # @api private
  #
  # source://tty-command//lib/tty/command/printers/pretty.rb#63
  def pluralize(count, word); end

  # @api private
  #
  # source://tty-command//lib/tty/command/printers/pretty.rb#68
  def success_or_failure(status); end
end

# source://tty-command//lib/tty/command/printers/pretty.rb#7
TTY::Command::Printers::Pretty::TIME_FORMAT = T.let(T.unsafe(nil), String)

# source://tty-command//lib/tty/command/printers/progress.rb#6
class TTY::Command::Printers::Progress < ::TTY::Command::Printers::Abstract
  # source://tty-command//lib/tty/command/printers/progress.rb#7
  def print_command_exit(cmd, status, runtime, *args); end

  # source://tty-command//lib/tty/command/printers/progress.rb#11
  def write(*_arg0); end

  private

  # @api private
  #
  # source://tty-command//lib/tty/command/printers/progress.rb#17
  def success_or_failure(status); end
end

# source://tty-command//lib/tty/command/printers/quiet.rb#6
class TTY::Command::Printers::Quiet < ::TTY::Command::Printers::Abstract
  # source://tty-command//lib/tty/command/printers/quiet.rb#15
  def print_command_err_data(cmd, *args); end

  # source://tty-command//lib/tty/command/printers/quiet.rb#19
  def print_command_exit(cmd, status, *args); end

  # source://tty-command//lib/tty/command/printers/quiet.rb#11
  def print_command_out_data(cmd, *args); end

  # source://tty-command//lib/tty/command/printers/quiet.rb#7
  def print_command_start(cmd); end

  # source://tty-command//lib/tty/command/printers/quiet.rb#28
  def write(cmd, message, data = T.unsafe(nil)); end
end

# source://tty-command//lib/tty/command/process_runner.rb#11
class TTY::Command::ProcessRunner
  # Initialize a Runner object
  #
  # @api private
  # @param printer [Printer] the printer to use for logging
  # @return [ProcessRunner] a new instance of ProcessRunner
  #
  # source://tty-command//lib/tty/command/process_runner.rb#21
  def initialize(cmd, printer, &block); end

  # the command to be spawned
  #
  # source://tty-command//lib/tty/command/process_runner.rb#13
  def cmd; end

  # Execute child process
  #
  # Write the input if provided to the child's stdin and read
  # the contents of both the stdout and stderr.
  #
  # If a block is provided then yield the stdout and stderr content
  # as its being read.
  #
  # @api public
  #
  # source://tty-command//lib/tty/command/process_runner.rb#40
  def run!; end

  # Stop a process marked by pid
  #
  # @api public
  # @param pid [Integer]
  #
  # source://tty-command//lib/tty/command/process_runner.rb#69
  def terminate(pid); end

  private

  # @api private
  # @raise [TimeoutExceeded]
  #
  # source://tty-command//lib/tty/command/process_runner.rb#79
  def handle_timeout(runtime); end

  # Read stream and invoke handler when data becomes available
  #
  # @api private
  # @param stream [IO] the stream to read data from
  # @param handler [Proc] the handler to call when data becomes available
  #
  # source://tty-command//lib/tty/command/process_runner.rb#165
  def read_stream(stream, handler); end

  # Read stdout & stderr streams in the background
  #
  # @api private
  # @param stdout [IO]
  # @param stderr [IO]
  #
  # source://tty-command//lib/tty/command/process_runner.rb#127
  def read_streams(stdout, stderr); end

  # @api private
  #
  # source://tty-command//lib/tty/command/process_runner.rb#196
  def waitpid(pid); end

  # Write the input to the process stdin
  #
  # @api private
  #
  # source://tty-command//lib/tty/command/process_runner.rb#89
  def write_stream(stream, input); end
end

# The buffer size for reading stdout and stderr
#
# source://tty-command//lib/tty/command/process_runner.rb#76
TTY::Command::ProcessRunner::BUFSIZE = T.let(T.unsafe(nil), Integer)

# Path to the current Ruby
#
# source://tty-command//lib/tty/command.rb#22
TTY::Command::RUBY = T.let(T.unsafe(nil), String)

# Encapsulates the information on the command executed
#
# @api public
#
# source://tty-command//lib/tty/command/result.rb#8
class TTY::Command::Result
  include ::Enumerable

  # Create a result
  #
  # @api public
  # @return [Result] a new instance of Result
  #
  # source://tty-command//lib/tty/command/result.rb#25
  def initialize(status, out, err, runtime = T.unsafe(nil)); end

  # @api public
  #
  # source://tty-command//lib/tty/command/result.rb#84
  def ==(other); end

  # @api public
  # @return [Boolean]
  #
  # source://tty-command//lib/tty/command/result.rb#70
  def complete?; end

  # Enumerate over output lines
  #
  # @api public
  # @param separator [String]
  #
  # source://tty-command//lib/tty/command/result.rb#37
  def each(separator = T.unsafe(nil), &block); end

  # All data written out to process's stdin stream
  #
  # @api public
  #
  # source://tty-command//lib/tty/command/result.rb#16
  def err; end

  # Information on how the process exited
  #
  # @api public
  #
  # source://tty-command//lib/tty/command/result.rb#52
  def exit_status; end

  # @api public
  # @return [Boolean]
  #
  # source://tty-command//lib/tty/command/result.rb#70
  def exited?; end

  # Information on how the process exited
  #
  # @api public
  #
  # source://tty-command//lib/tty/command/result.rb#52
  def exitstatus; end

  # @api public
  # @return [Boolean]
  #
  # source://tty-command//lib/tty/command/result.rb#79
  def failed?; end

  # @api public
  # @return [Boolean]
  #
  # source://tty-command//lib/tty/command/result.rb#79
  def failure?; end

  # All data written out to process's stdout stream
  #
  # @api public
  #
  # source://tty-command//lib/tty/command/result.rb#12
  def out; end

  # Total command execution time
  #
  # @api public
  #
  # source://tty-command//lib/tty/command/result.rb#20
  def runtime; end

  # Information on how the process exited
  #
  # @api public
  #
  # source://tty-command//lib/tty/command/result.rb#52
  def status; end

  # All data written out to process's stdin stream
  #
  # @api public
  #
  # source://tty-command//lib/tty/command/result.rb#16
  def stderr; end

  # All data written out to process's stdout stream
  #
  # @api public
  #
  # source://tty-command//lib/tty/command/result.rb#12
  def stdout; end

  # @api public
  # @return [Boolean]
  #
  # source://tty-command//lib/tty/command/result.rb#75
  def success?; end

  # @api public
  #
  # source://tty-command//lib/tty/command/result.rb#66
  def to_ary; end

  # @api public
  #
  # source://tty-command//lib/tty/command/result.rb#58
  def to_i; end

  # @api public
  #
  # source://tty-command//lib/tty/command/result.rb#62
  def to_s; end
end

# source://tty-command//lib/tty/command.rb#19
class TTY::Command::TimeoutExceeded < ::StandardError; end

# Retains the first N bytes and the last N bytes from written content
#
# @api private
#
# source://tty-command//lib/tty/command/truncator.rb#8
class TTY::Command::Truncator
  # Create a Truncator
  #
  # @api public
  # @option options
  # @param options [Hash]
  # @return [Truncator] a new instance of Truncator
  #
  # source://tty-command//lib/tty/command/truncator.rb#18
  def initialize(options = T.unsafe(nil)); end

  # Write content
  #
  # @api public
  # @param content [String] the content to write
  # @return [nil]
  #
  # source://tty-command//lib/tty/command/truncator.rb#33
  def <<(content); end

  # Truncated representation of the content
  #
  # @api public
  # @return [String]
  #
  # source://tty-command//lib/tty/command/truncator.rb#57
  def read; end

  # Truncated representation of the content
  #
  # @api public
  # @return [String]
  #
  # source://tty-command//lib/tty/command/truncator.rb#57
  def to_s; end

  # Write content
  #
  # @api public
  # @param content [String] the content to write
  # @return [nil]
  #
  # source://tty-command//lib/tty/command/truncator.rb#33
  def write(content); end

  private

  # Append value to destination
  #
  # @api private
  # @param value [String]
  # @param dst [String]
  #
  # source://tty-command//lib/tty/command/truncator.rb#93
  def append(value, dst); end

  # Copy minimum bytes from source to destination
  #
  # @api private
  # @return [String] the remaining content
  #
  # source://tty-command//lib/tty/command/truncator.rb#76
  def copy(value, dest); end
end

# Default maximum byte size for prefix & suffix
#
# @api private
#
# source://tty-command//lib/tty/command/truncator.rb#10
TTY::Command::Truncator::DEFAULT_SIZE = T.let(T.unsafe(nil), Integer)

# source://tty-command//lib/tty/command/version.rb#5
TTY::Command::VERSION = T.let(T.unsafe(nil), String)

# source://tty-command//lib/tty/command.rb#27
TTY::Command::WIN_PLATFORMS = T.let(T.unsafe(nil), Regexp)
