# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pry-rescue` gem.
# Please instead update this file by running `bin/tapioca gem pry-rescue`.


# PryRescue provides the ability to open a Pry shell whenever an unhandled exception is
# raised in your code.
#
# The main API is exposed via the Pry object, but here are a load of helpers that I didn't
# want to pollute the Pry namespace with.
#
# @see {Pry::rescue}
#
# source://pry-rescue//lib/pry-rescue/rack.rb#3
class PryRescue
  class << self
    # Returns the value of attribute any_exception_captured.
    #
    # source://pry-rescue//lib/pry-rescue.rb#42
    def any_exception_captured; end

    # Sets the attribute any_exception_captured
    #
    # @param value the value to set the attribute any_exception_captured to.
    #
    # source://pry-rescue//lib/pry-rescue.rb#42
    def any_exception_captured=(_arg0); end

    # Start a Pry session in the context of the exception.
    #
    # @param exception [Exception] The exception raised
    #
    # source://pry-rescue//lib/pry-rescue.rb#46
    def enter_exception_context(exception); end

    # Is the user currently inside pry rescue?
    #
    # @return [Boolean]
    #
    # source://pry-rescue//lib/pry-rescue.rb#93
    def in_exception_context?; end

    # Load a script wrapped in Pry::rescue{ }
    #
    # @param script [String] The name of the script
    #
    # source://pry-rescue//lib/pry-rescue.rb#72
    def load(script, ensure_repl = T.unsafe(nil)); end

    # source://pry-rescue//lib/pry-rescue.rb#83
    def load_rake(task); end

    # Called when rescue --peek is used and the user hits <Ctrl+C>
    # or sends whichever signal is configured.
    #
    # source://pry-rescue//lib/pry-rescue/peek.rb#8
    def peek!(*_arg0); end

    # source://pry-rescue//lib/pry-rescue/peek.rb#2
    def peek_on_signal(signal); end

    private

    # Is this file definitely part of the codebase the user is working on?
    #
    # This function exists because sometimes Dir.pwd can be a gem_path?,
    # and the user expects to be able to debug a gem when they're cd'd
    # into it.
    #
    # @param file [String] the absolute path
    # @return [Boolean]
    #
    # source://pry-rescue//lib/pry-rescue.rb#141
    def current_path?(file); end

    # Is this path included in a gem?
    #
    # @param file [String] the absolute path
    # @return [Boolean]
    #
    # source://pry-rescue//lib/pry-rescue.rb#149
    def gem_path?(file); end

    # When using pry-stack-explorer we want to start the rescue session outside of gems
    # and the standard library, as that is most helpful for users.
    #
    # @param bindings [Array<Bindings>] All bindings
    # @return [Fixnum] The offset of the first binding of user code
    #
    # source://pry-rescue//lib/pry-rescue.rb#115
    def initial_frame(bindings); end

    # Did this raise happen within pry-rescue?
    #
    # This is designed to remove the extra raise that is caused by PryRescue.load.
    # TODO: we should figure out why it happens...
    #
    # @param e [Exception] The raised exception
    # @return [Boolean]
    #
    # source://pry-rescue//lib/pry-rescue.rb#105
    def phantom_load_raise?(e); end

    # Define the :before_session hook for the Pry instance.
    # This ensures that the `_ex_` and `_raised_` sticky locals are
    # properly set.
    #
    # @param ex [Exception] The exception we're currently looking at
    #
    # source://pry-rescue//lib/pry-rescue.rb#198
    def pry_hooks(ex); end

    # Is this path in the ruby standard library?
    #
    # @param file [String] the absolute path
    # @return [Boolean]
    #
    # source://pry-rescue//lib/pry-rescue.rb#163
    def stdlib_path?(file); end

    # Is this path likely to be code the user is working with right now?
    #
    # @param file [String] the absolute path
    # @return [Boolean]
    #
    # source://pry-rescue//lib/pry-rescue.rb#127
    def user_path?(file); end

    # source://pry-rescue//lib/pry-rescue.rb#210
    def with_program_name(name); end

    # Remove bindings that are part of Interception/Pry.rescue's internal
    # event handling that happens as part of the exception hooking process.
    #
    # @param bindings [Array<Binding>] The call stack.
    #
    # source://pry-rescue//lib/pry-rescue.rb#171
    def without_bindings_below_raise(bindings); end

    # Remove multiple bindings for the same function.
    #
    # @param bindings [Array<Bindings>] The call stack
    # @return [Array<Bindings>]
    #
    # source://pry-rescue//lib/pry-rescue.rb#184
    def without_duplicates(bindings); end
  end
end

# A Rack middleware that wraps each web request in Pry::rescue.
#
# source://pry-rescue//lib/pry-rescue/rack.rb#5
class PryRescue::Rack
  # Instantiate the middleware
  #
  # @param app [#call]
  # @return [Rack] a new instance of Rack
  #
  # source://pry-rescue//lib/pry-rescue/rack.rb#9
  def initialize(app); end

  # Handle a web request
  #
  # @param env [Rack::Env]
  #
  # source://pry-rescue//lib/pry-rescue/rack.rb#15
  def call(env); end
end

# source://pry-rescue//lib/pry-rescue/source_location.rb#2
module PryRescue::SourceLocation
  class << self
    # source://pry-rescue//lib/pry-rescue/source_location.rb#6
    def call(b); end
  end
end

# source://pry-rescue//lib/pry-rescue/source_location.rb#3
PryRescue::SourceLocation::DEPRECATION_TIME = T.let(T.unsafe(nil), Time)

# source://pry-rescue//lib/pry-rescue/source_location.rb#5
PryRescue::SourceLocation::WithRuby2_5 = T.let(T.unsafe(nil), Proc)

# source://pry-rescue//lib/pry-rescue/source_location.rb#6
PryRescue::SourceLocation::WithRuby2_6 = T.let(T.unsafe(nil), Proc)
