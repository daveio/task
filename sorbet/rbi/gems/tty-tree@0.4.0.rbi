# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tty-tree` gem.
# Please instead update this file by running `bin/tapioca gem tty-tree`.


# source://tty-tree//lib/tty/tree/node.rb#6
module TTY; end

# source://tty-tree//lib/tty/tree/node.rb#7
class TTY::Tree
  # Create a Tree
  #
  # @api public
  # @param data [String, Dir, Hash]
  # @return [Tree] a new instance of Tree
  #
  # source://tty-tree//lib/tty/tree.rb#25
  def initialize(data = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Add leaf node
  #
  # @api public
  #
  # source://tty-tree//lib/tty/tree.rb#82
  def leaf(name, &block); end

  # Add node to this tree.
  #
  # @api public
  # @example
  #   TTY::Tree.new do
  #   node '...' do
  #   node '...'
  #   end
  #   end
  # @param name [Symbol, String] the name for the node
  # @param type [Node, LeafNode] the type of node to add
  #
  # source://tty-tree//lib/tty/tree.rb#58
  def node(name, type = T.unsafe(nil), &block); end

  # The list of nodes in this tree.
  #
  # source://tty-tree//lib/tty/tree.rb#18
  def nodes; end

  # @api public
  #
  # source://tty-tree//lib/tty/tree.rb#87
  def render(options = T.unsafe(nil)); end

  private

  # source://tty-tree//lib/tty/tree.rb#105
  def select_renderer(as); end

  # @api private
  #
  # source://tty-tree//lib/tty/tree.rb#96
  def select_walker; end

  class << self
    # @api public
    #
    # source://tty-tree//lib/tty/tree.rb#13
    def [](data); end
  end
end

# Render nodes as files paths explorer
#
# source://tty-tree//lib/tty/tree/directory_renderer.rb#6
class TTY::Tree::DirectoryRenderer
  # @return [DirectoryRenderer] a new instance of DirectoryRenderer
  #
  # source://tty-tree//lib/tty/tree/directory_renderer.rb#20
  def initialize(nodes, options = T.unsafe(nil)); end

  # source://tty-tree//lib/tty/tree/directory_renderer.rb#27
  def render; end

  private

  # source://tty-tree//lib/tty/tree/directory_renderer.rb#35
  def render_node(acc, node, pipe_mark, space_mark); end
end

# source://tty-tree//lib/tty/tree/directory_renderer.rb#7
TTY::Tree::DirectoryRenderer::MARKERS = T.let(T.unsafe(nil), Hash)

# Walk and collect nodes from hash data strcture.
#
# @api public
#
# source://tty-tree//lib/tty/tree/hash_walker.rb#12
class TTY::Tree::HashWalker
  # @api public
  # @return [HashWalker] a new instance of HashWalker
  #
  # source://tty-tree//lib/tty/tree/hash_walker.rb#19
  def initialize(options = T.unsafe(nil)); end

  # @api public
  #
  # source://tty-tree//lib/tty/tree/hash_walker.rb#17
  def dirs_count; end

  # @api public
  #
  # source://tty-tree//lib/tty/tree/hash_walker.rb#15
  def files_count; end

  # @api public
  #
  # source://tty-tree//lib/tty/tree/hash_walker.rb#13
  def nodes; end

  # @api public
  #
  # source://tty-tree//lib/tty/tree/hash_walker.rb#27
  def traverse(data); end

  # @api public
  #
  # source://tty-tree//lib/tty/tree/hash_walker.rb#31
  def walk(data, parent_path, prefix, level, is_last); end
end

# Node
#
# source://tty-tree//lib/tty/tree/node.rb#84
class TTY::Tree::LeafNode < ::TTY::Tree::Node
  # @return [Boolean]
  #
  # source://tty-tree//lib/tty/tree/node.rb#85
  def leaf?; end
end

# A representation of tree node
#
# @api private
#
# source://tty-tree//lib/tty/tree/node.rb#11
class TTY::Tree::Node
  extend ::Forwardable

  # @api private
  # @return [Node] a new instance of Node
  #
  # source://tty-tree//lib/tty/tree/node.rb#35
  def initialize(path, parent, prefix, level); end

  # @api private
  #
  # source://tty-tree//lib/tty/tree/node.rb#70
  def ==(other); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def directory?(*args, **_arg1, &block); end

  # @api private
  #
  # source://tty-tree//lib/tty/tree/node.rb#70
  def eql?(other); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def executable?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def file?(*args, **_arg1, &block); end

  # @api private
  #
  # source://tty-tree//lib/tty/tree/node.rb#48
  def full_path; end

  # @api private
  # @return [Boolean]
  #
  # source://tty-tree//lib/tty/tree/node.rb#58
  def hidden?; end

  # @api private
  # @return [Boolean]
  #
  # source://tty-tree//lib/tty/tree/node.rb#62
  def leaf?; end

  # The directory depth
  #
  # @api private
  #
  # source://tty-tree//lib/tty/tree/node.rb#24
  def level; end

  # The base name for the directory or file
  #
  # @api private
  #
  # source://tty-tree//lib/tty/tree/node.rb#15
  def name; end

  # The parent directory path
  #
  # @api private
  #
  # source://tty-tree//lib/tty/tree/node.rb#18
  def parent; end

  # The current path
  #
  # @api private
  #
  # source://tty-tree//lib/tty/tree/node.rb#30
  def path; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def pipe?(*args, **_arg1, &block); end

  # The require path prefix
  #
  # @api private
  #
  # source://tty-tree//lib/tty/tree/node.rb#21
  def prefix; end

  # @api private
  # @return [Boolean]
  #
  # source://tty-tree//lib/tty/tree/node.rb#54
  def root?; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def socket?(*args, **_arg1, &block); end

  # The file stat
  #
  # @api private
  #
  # source://tty-tree//lib/tty/tree/node.rb#27
  def stat; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def symlink?(*args, **_arg1, &block); end

  # @api private
  #
  # source://tty-tree//lib/tty/tree/node.rb#66
  def to_s; end

  protected

  # @api private
  #
  # source://tty-tree//lib/tty/tree/node.rb#77
  def state_attrs; end
end

# @api private
#
# source://tty-tree//lib/tty/tree/node.rb#81
TTY::Tree::Node::ROOT = T.let(T.unsafe(nil), TTY::Tree::Node)

# Render nodes as numbered list
#
# source://tty-tree//lib/tty/tree/number_renderer.rb#6
class TTY::Tree::NumberRenderer
  # @return [NumberRenderer] a new instance of NumberRenderer
  #
  # source://tty-tree//lib/tty/tree/number_renderer.rb#7
  def initialize(nodes, options = T.unsafe(nil)); end

  # source://tty-tree//lib/tty/tree/number_renderer.rb#13
  def render; end

  private

  # source://tty-tree//lib/tty/tree/number_renderer.rb#21
  def render_node(acc, node, i, mark); end
end

# Walk and collect nodes from directory.
#
# @api public
#
# source://tty-tree//lib/tty/tree/path_walker.rb#12
class TTY::Tree::PathWalker
  # Create a PathWalker
  #
  # @api public
  # @return [PathWalker] a new instance of PathWalker
  #
  # source://tty-tree//lib/tty/tree/path_walker.rb#22
  def initialize(options = T.unsafe(nil)); end

  # @api public
  #
  # source://tty-tree//lib/tty/tree/path_walker.rb#39
  def add_filter(filter); end

  # @api public
  #
  # source://tty-tree//lib/tty/tree/path_walker.rb#17
  def dirs_count; end

  # @api public
  #
  # source://tty-tree//lib/tty/tree/path_walker.rb#15
  def files_count; end

  # @api public
  #
  # source://tty-tree//lib/tty/tree/path_walker.rb#13
  def nodes; end

  # Traverse given path recursively
  #
  # @api public
  # @param path [String] the path to traverse
  #
  # source://tty-tree//lib/tty/tree/path_walker.rb#49
  def traverse(path); end

  private

  # Filter entries
  #
  # @api private
  #
  # source://tty-tree//lib/tty/tree/path_walker.rb#67
  def filter_entries(entries, filters); end

  # Walk paths recursively
  #
  # @api private
  #
  # source://tty-tree//lib/tty/tree/path_walker.rb#76
  def walk(parent_path, entries, prefix, level); end
end

# source://tty-tree//lib/tty/tree/version.rb#5
TTY::Tree::VERSION = T.let(T.unsafe(nil), String)
