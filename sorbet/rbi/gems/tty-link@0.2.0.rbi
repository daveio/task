# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tty-link` gem.
# Please instead update this file by running `bin/tapioca gem tty-link`.


# source://tty-link//lib/tty/link/ansi_link.rb#3
module TTY; end

# Responsible for detecting and generating terminal hyperlinks
#
# @api public
#
# source://tty-link//lib/tty/link/ansi_link.rb#4
class TTY::Link
  # Create a {TTY::Link} instance
  #
  # @api public
  # @example
  #   link = TTY::Link.new
  # @example
  #   link = TTY::Link.new(env: {"VTE_VERSION" => "7603"})
  # @example
  #   link = TTY::Link.new(hyperlink: :always)
  # @example
  #   link = TTY::Link.new(output: $stderr)
  # @example
  #   link = TTY::Link.new(plain: ":name (:url)")
  # @param env [ENV, Hash{String => String}] the environment variables
  # @param hyperlink [String, Symbol] the hyperlink detection out of always, auto or never
  # @param output [IO] the output stream, defaults to $stdout
  # @param plain [String] the plain URL template
  # @return [Link] a new instance of Link
  #
  # source://tty-link//lib/tty/link.rb#141
  def initialize(env: T.unsafe(nil), hyperlink: T.unsafe(nil), output: T.unsafe(nil), plain: T.unsafe(nil)); end

  # Detect terminal hyperlink support
  #
  # @api public
  # @example
  #   link.link?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link.rb#194
  def link?; end

  # Generate terminal hyperlink
  #
  # @api public
  # @example
  #   link.link_to("TTY Toolkit", "https://ttytoolkit.org")
  # @example
  #   link.link_to("https://ttytoolkit.org")
  # @example
  #   link.link_to("TTY Toolkit", "https://ttytoolkit.org",
  #   attrs: {id: "tty-toolkit"})
  # @example
  #   link.link_to("https://ttytoolkit.org",
  #   attrs: {id: "tty-toolkit", title: "TTY Toolkit"})
  # @param name [String] the name for the URL
  # @param url [String, nil] the URL target
  # @param attrs [Hash{Symbol => String}] the URL attributes
  # @return [String]
  #
  # source://tty-link//lib/tty/link.rb#175
  def link_to(name, url = T.unsafe(nil), attrs: T.unsafe(nil)); end

  private

  # Create an {TTY::Link::ANSILink} instance
  #
  # @api private
  # @example
  #   ansi_link("TTY Toolkit", "https://ttytoolkit.org", {id: "tty-tookit"})
  # @param name [String] the URL name
  # @param url [String] the URL target
  # @param attrs [Hash{Symbol => String}] the URL attributes
  # @return [TTY::Link::ANSILink]
  # @see ANSILink#new
  #
  # source://tty-link//lib/tty/link.rb#232
  def ansi_link(name, url, attrs); end

  # Whether to create an {TTY::Link::ANSILink} or a {TTY::Link::PlainLink}
  #
  # @api private
  # @example
  #   link.ansi_link?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link.rb#211
  def ansi_link?; end

  # Read the hyperlink environment variable
  #
  # @api private
  # @example
  #   link.hyperlink_env
  #   # => "always"
  # @return [String, nil]
  #
  # source://tty-link//lib/tty/link.rb#245
  def hyperlink_env; end

  # Create a {TTY::Link::HyperlinkParameter} instance
  #
  # @api private
  # @example
  #   link.hyperlink_parameter(:always)
  # @param hyperlink [String, Symbol] the hyperlink detection out of always, auto or never
  # @raise [TTY::Link::ValueError] the value isn't always, auto or never
  # @return [TTY::Link::HyperlinkParameter]
  #
  # source://tty-link//lib/tty/link.rb#263
  def hyperlink_parameter(hyperlink); end

  # Create a {TTY::Link::PlainLink} instance
  #
  # @api private
  # @example
  #   plain_link("TTY Toolkit", "https://ttytoolkit.org")
  # @param name [String] the URL name
  # @param url [String] the URL target
  # @return [TTY::Link::PlainLink]
  # @see PlainLink#new
  #
  # source://tty-link//lib/tty/link.rb#282
  def plain_link(name, url); end

  # Terminals for detecting hyperlink support
  #
  # @api private
  # @example
  #   link.terminals
  # @return [Array<TTY::Link::Terminals::Abstract>]
  #
  # source://tty-link//lib/tty/link.rb#294
  def terminals; end

  # Detect the terminal device
  #
  # @api private
  # @example
  #   link.tty?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link.rb#309
  def tty?; end

  class << self
    # Detect terminal hyperlink support
    #
    # @api public
    # @example
    #   TTY::Link.link?
    #   # => true
    # @example
    #   TTY::Link.link?(env: {"VTE_VERSION" => "7603"})
    #   # => true
    # @example
    #   TTY::Link.link?(output: $stderr)
    #   # => false
    # @param env [ENV, Hash{String => String}] the environment variables
    # @param output [IO] the output stream, defaults to $stdout
    # @return [Boolean]
    # @see #link?
    #
    # source://tty-link//lib/tty/link.rb#110
    def link?(env: T.unsafe(nil), output: T.unsafe(nil)); end

    # Generate terminal hyperlink
    #
    # @api public
    # @example
    #   TTY::Link.link_to("TTY Toolkit", "https://ttytoolkit.org")
    # @example
    #   TTY::Link.link_to("https://ttytoolkit.org")
    # @example
    #   TTY::Link.link_to("TTY Toolkit", "https://ttytoolkit.org",
    #   attrs: {id: "tty-toolkit"})
    # @example
    #   TTY::Link.link_to("TTY Toolkit", "https://ttytoolkit.org",
    #   env: {"VTE_VERSION" => "7603"})
    # @example
    #   TTY::Link.link_to("TTY Toolkit", "https://ttytoolkit.org",
    #   hyperlink: :always)
    # @example
    #   TTY::Link.link_to("TTY Toolkit", "https://ttytoolkit.org",
    #   output: $stderr)
    # @example
    #   TTY::Link.link_to("TTY Toolkit", "https://ttytoolkit.org",
    #   plain: ":name (:url)")
    # @param name [String] the name for the URL
    # @param url [String, nil] the URL target
    # @param attrs [Hash{Symbol => String}] the URL attributes
    # @param env [ENV, Hash{String => String}] the environment variables
    # @param hyperlink [String, Symbol] the hyperlink detection out of always, auto or never
    # @param output [IO] the output stream, defaults to $stdout
    # @param plain [String] the plain URL template
    # @return [String]
    # @see #link_to
    #
    # source://tty-link//lib/tty/link.rb#80
    def link_to(name, url = T.unsafe(nil), attrs: T.unsafe(nil), env: T.unsafe(nil), hyperlink: T.unsafe(nil), output: T.unsafe(nil), plain: T.unsafe(nil)); end
  end
end

# Responsible for converting a URL to an ANSI-controlled terminal link
#
# @api private
#
# source://tty-link//lib/tty/link/ansi_link.rb#8
class TTY::Link::ANSILink
  # Create an {TTY::Link::ANSILink} instance
  #
  # @api public
  # @example
  #   ansi_link = TTY::Link::ANSILink.new(
  #   "TTY Toolkit", "https://ttytoolkit.org", {id: "tty-toolkit"})
  # @param name [String] the URL name
  # @param url [String] the URL target
  # @param attrs [Hash{Symbol => String}] the URL attributes
  # @return [ANSILink] a new instance of ANSILink
  #
  # source://tty-link//lib/tty/link/ansi_link.rb#63
  def initialize(name, url, attrs); end

  # Convert this link to an ANSI-controlled string
  #
  # @api public
  # @example
  #   ansi_link.to_s
  #   # => "\e]8;id=tty-toolkit;https://ttytoolkit.org\aTTY Toolkit\e]8;;\a"
  # @return [String]
  #
  # source://tty-link//lib/tty/link/ansi_link.rb#78
  def to_s; end

  private

  # Convert the attributes hash to a string list
  #
  # @api private
  # @example
  #   ansi_link.convert_to_attributes(
  #   {id: "tty-toolkit", title: "TTY Toolkit"})
  #   # => "id=tty-toolkit:title=TTY Toolkit"
  # @param attrs [Hash{Symbol => String}] the attributes to convert to a string list
  # @return [String]
  #
  # source://tty-link//lib/tty/link/ansi_link.rb#98
  def convert_to_attributes(attrs); end
end

# The attribute pair separator
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/ansi_link.rb#22
TTY::Link::ANSILink::ATTRIBUTE_PAIR_SEPARATOR = T.let(T.unsafe(nil), String)

# The attribute separator
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/ansi_link.rb#14
TTY::Link::ANSILink::ATTRIBUTE_SEPARATOR = T.let(T.unsafe(nil), String)

# The bell control code
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/ansi_link.rb#30
TTY::Link::ANSILink::BEL = T.let(T.unsafe(nil), String)

# The hyperlink operating system command code
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/ansi_link.rb#38
TTY::Link::ANSILink::OSC8 = T.let(T.unsafe(nil), String)

# The parameters separator
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/ansi_link.rb#46
TTY::Link::ANSILink::SEP = T.let(T.unsafe(nil), String)

# Raised when an abstract method is called
#
# @api public
#
# source://tty-link//lib/tty/link/errors.rb#13
class TTY::Link::AbstractMethodError < ::TTY::Link::Error
  # Create an {TTY::Link::AbstractMethodError} instance
  #
  # @api private
  # @example
  #   TTY::Link::AbstractMethodError.new("Terminal", "name?")
  # @param class_name [String] the class name
  # @param method_name [Symbol] the method name
  # @return [AbstractMethodError] a new instance of AbstractMethodError
  #
  # source://tty-link//lib/tty/link/errors.rb#28
  def initialize(class_name, method_name); end
end

# @api public
#
# source://tty-link//lib/tty/link/errors.rb#14
TTY::Link::AbstractMethodError::MESSAGE = T.let(T.unsafe(nil), String)

# The default plain URL template
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link.rb#21
TTY::Link::DEFAULT_TEMPLATE = T.let(T.unsafe(nil), String)

# Raised to signal an error condition
#
# @api public
#
# source://tty-link//lib/tty/link/errors.rb#8
class TTY::Link::Error < ::StandardError; end

# The hyperlink environment variable name
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link.rb#29
TTY::Link::HYPERLINK_ENV = T.let(T.unsafe(nil), String)

# Responsible for representing hyperlink parameter value
#
# @api private
#
# source://tty-link//lib/tty/link/hyperlink_parameter.rb#8
class TTY::Link::HyperlinkParameter
  # Create a {TTY::Link::HyperlinkParameter} instance
  #
  # @api public
  # @example
  #   hyperlink_parameter = TTY::Link::HyperlinkParameter.new(:always)
  # @param value [String, Symbol] the parameter value
  # @raise [TTY::Link::ValueError] the value isn't always, auto or never
  # @return [HyperlinkParameter] a new instance of HyperlinkParameter
  #
  # source://tty-link//lib/tty/link/hyperlink_parameter.rb#29
  def initialize(value); end

  # Check whether this parameter value is always
  #
  # @api public
  # @example
  #   hyperlink_parameter.always?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/hyperlink_parameter.rb#42
  def always?; end

  # Check whether this parameter value is auto
  #
  # @api public
  # @example
  #   hyperlink_parameter.auto?
  #   # => false
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/hyperlink_parameter.rb#55
  def auto?; end

  # Check whether this parameter value is never
  #
  # @api public
  # @example
  #   hyperlink_parameter.never?
  #   # => false
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/hyperlink_parameter.rb#68
  def never?; end

  private

  # Validate this parameter value
  #
  # @api private
  # @example
  #   hyperlink_parameter.validate(:invalid)
  # @param value [Object] the value to validate
  # @raise [TTY::Link::ValueError] the value isn't always, auto or never
  # @return [String, Symbol]
  #
  # source://tty-link//lib/tty/link/hyperlink_parameter.rb#88
  def validate(value); end
end

# The allowed parameter values
#
# @api private
# @return [Array<String>]
#
# source://tty-link//lib/tty/link/hyperlink_parameter.rb#14
TTY::Link::HyperlinkParameter::ALLOWED_VALUES = T.let(T.unsafe(nil), Array)

# Responsible for converting a URL to a plain terminal link
#
# @api private
#
# source://tty-link//lib/tty/link/plain_link.rb#8
class TTY::Link::PlainLink
  # Create a {TTY::Link::PlainLink} instance
  #
  # @api public
  # @example
  #   plain_link = TTY::Link::PlainLink.new(
  #   "TTY Toolkit", "https://ttytoolkit.org", ":name (:url)")
  # @param name [String] the URL name
  # @param url [String] the URL target
  # @param template [String] the URL replacement template
  # @return [PlainLink] a new instance of PlainLink
  #
  # source://tty-link//lib/tty/link/plain_link.rb#31
  def initialize(name, url, template); end

  # Convert this link to a plain string
  #
  # @api public
  # @example
  #   plain_link.to_s
  #   # => "TTY Toolkit (https://ttytoolkit.org)"
  # @return [String]
  #
  # source://tty-link//lib/tty/link/plain_link.rb#46
  def to_s; end
end

# The replacement tokens pattern
#
# @api private
# @return [Regexp]
#
# source://tty-link//lib/tty/link/plain_link.rb#14
TTY::Link::PlainLink::REPLACEMENT_TOKENS_PATTERN = T.let(T.unsafe(nil), Regexp)

# Responsible for comparing terminal release versions
#
# @api private
#
# source://tty-link//lib/tty/link/semantic_version.rb#8
class TTY::Link::SemanticVersion
  include ::Comparable

  # Create a {TTY::Link::SemanticVersion} instance
  #
  # @api private
  # @example
  #   TTY::Link::SemanticVersion.new(1, 2, 3)
  # @param major [Integer] the major number
  # @param minor [Integer] the minor number
  # @param patch [Integer] the patch number
  # @return [SemanticVersion] a new instance of SemanticVersion
  #
  # source://tty-link//lib/tty/link/semantic_version.rb#145
  def initialize(major, minor, patch); end

  # Compare this semantic version with another object
  #
  # @api public
  # @example
  #   semantic_version >= other
  # @param other [Object] the other object to compare with
  # @return [Integer, nil] Return negative, zero, or positive number when
  #   this semantic version is less than, equal to, or
  #   greater than other semantic version. Return nil
  #   when the other object is not a semantic version.
  #
  # source://tty-link//lib/tty/link/semantic_version.rb#167
  def <=>(other); end

  # Generate hash value for this semantic version
  #
  # @api public
  # @example
  #   semantic_version.hash
  # @return [Integer]
  #
  # source://tty-link//lib/tty/link/semantic_version.rb#187
  def hash; end

  # Convert this semantic version to a string
  #
  # @api public
  # @example
  #   semantic_version.inspect
  # @return [String]
  #
  # source://tty-link//lib/tty/link/semantic_version.rb#199
  def inspect; end

  # The major number
  #
  # @api public
  # @example
  #   semantic_version.major
  # @return [Integer]
  #
  # source://tty-link//lib/tty/link/semantic_version.rb#110
  def major; end

  # The minor number
  #
  # @api public
  # @example
  #   semantic_version.minor
  # @return [Integer]
  #
  # source://tty-link//lib/tty/link/semantic_version.rb#120
  def minor; end

  # The patch number
  #
  # @api public
  # @example
  #   semantic_version.patch
  # @return [Integer]
  #
  # source://tty-link//lib/tty/link/semantic_version.rb#130
  def patch; end

  class << self
    # source://tty-link//lib/tty/link/semantic_version.rb#60
    def [](*version, separator: T.unsafe(nil)); end

    # Create a {TTY::Link::SemanticVersion} instance from a version value
    #
    # @api public
    # @example
    #   TTY::Link::SemanticVersion.from(1, 2, 3)
    # @example
    #   TTY::Link::SemanticVersion[1, 2, 3]
    # @example
    #   TTY::Link::SemanticVersion.from("1234")
    # @example
    #   TTY::Link::SemanticVersion.from("1-2-3", separator: "-")
    # @example
    #   TTY::Link::SemanticVersion.from("1.2.3")
    # @param version [Array<Integer, String>] the version to convert to a semantic version
    # @param separator [String] the version separator
    # @return [TTY::Link::SemanticVersion]
    #
    # source://tty-link//lib/tty/link/semantic_version.rb#60
    def from(*version, separator: T.unsafe(nil)); end

    private

    # Convert a string version to an array
    #
    # @api private
    # @example
    #   TTY::Link::SemanticVersion.from("1234")
    #   # => ["0", "12", "34"]
    # @example
    #   TTY::Link::SemanticVersion.convert_to_array("1.2.3")
    #   # => ["1", "2", "3"]
    # @example
    #   TTY::Link::SemanticVersion.convert_to_array("1-2-3", separator: "-")
    #   # => ["1", "2", "3"]
    # @param version [String] the version to convert to an array
    # @param separator [String] the version separator
    # @return [Array<String>]
    #
    # source://tty-link//lib/tty/link/semantic_version.rb#93
    def convert_to_array(version, separator: T.unsafe(nil)); end

    def new(*_arg0); end
  end
end

# The unseparated version pattern
#
# @api private
# @return [Regexp]
#
# source://tty-link//lib/tty/link/semantic_version.rb#16
TTY::Link::SemanticVersion::UNSEPARATED_VERSION_PATTERN = T.let(T.unsafe(nil), Regexp)

# The version separator
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/semantic_version.rb#24
TTY::Link::SemanticVersion::VERSION_SEPARATOR = T.let(T.unsafe(nil), String)

# The zero number
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/semantic_version.rb#32
TTY::Link::SemanticVersion::ZERO_NUMBER = T.let(T.unsafe(nil), String)

# Responsible for loading terminals
#
# @api private
#
# source://tty-link//lib/tty/link/terminals.rb#8
module TTY::Link::Terminals
  class << self
    # Register a terminal class
    #
    # @api private
    # @example
    #   TTY::Link::Terminals.register(TTY::Link::Terminals::Iterm)
    # @param terminal_class [TTY::Link::Terminals::Abstract] the terminal class to register
    # @return [void]
    #
    # source://tty-link//lib/tty/link/terminals.rb#48
    def register(terminal_class); end

    # The registered terminal classes
    #
    # @api private
    # @example
    #   TTY::Link::Terminals.registered
    # @return [Array<TTY::Link::Terminals::Abstract>]
    #
    # source://tty-link//lib/tty/link/terminals.rb#33
    def registered; end

    private

    # Require all terminal files from the terminals directory
    #
    # @api private
    # @example
    #   TTY::Link::Terminals.require_terminals
    # @return [void]
    #
    # source://tty-link//lib/tty/link/terminals.rb#60
    def require_terminals; end
  end
end

# Responsible for providing common terminal detection
#
# @abstract Override {#name?} and {#version?} to implement
#   terminal hyperlinks detection
# @api private
#
# source://tty-link//lib/tty/link/terminals/abstract.rb#14
class TTY::Link::Terminals::Abstract
  # Create an {TTY::Link::Terminals::Abstract} instance
  #
  # @api public
  # @example
  #   terminal = TTY::Link::Terminals::Abstract.new(SemanticVersion, ENV)
  # @param semantic_version [TTY::Link::SemanticVersion] the semantic version creator
  # @param env [ENV, Hash{String => String}] the environment variables
  # @return [Abstract] a new instance of Abstract
  #
  # source://tty-link//lib/tty/link/terminals/abstract.rb#64
  def initialize(semantic_version, env); end

  # Detect a terminal hyperlink support
  #
  # @api public
  # @example
  #   terminal.link?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/abstract.rb#78
  def link?; end

  protected

  # The environment variables
  #
  # @api private
  # @example
  #   terminal.env
  # @return [ENV, Hash{String => String}]
  #
  # source://tty-link//lib/tty/link/terminals/abstract.rb#122
  def env; end

  # Detect a terminal name
  #
  # @abstract
  # @api private
  # @example
  #   terminal.name?
  # @raise [TTY::Link::AbstractMethodError] the class doesn't implement the name? method
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/abstract.rb#95
  def name?; end

  # Create a {TTY::Link::SemanticVersion} instance from a version value
  #
  # @api private
  # @example
  #   terminal.semantic_version(1, 2, 3)
  # @example
  #   terminal.semantic_version("1.2.3")
  # @option options
  # @param version [Array<Integer, String>] the version to convert to a semantic version
  # @param options [Hash{Symbol => String}] the options to convert to a semantic version
  # @return [TTY::Link::SemanticVersion]
  # @see SemanticVersion#from
  #
  # source://tty-link//lib/tty/link/terminals/abstract.rb#144
  def semantic_version(*version, **options); end

  # Read the term environment variable
  #
  # @api private
  # @example
  #   terminal.term
  #   # => "alacritty"
  # @return [String, nil]
  #
  # source://tty-link//lib/tty/link/terminals/abstract.rb#157
  def term; end

  # Read the term program environment variable
  #
  # @api private
  # @example
  #   terminal.term_program
  #   # => "iTerm.app"
  # @return [String, nil]
  #
  # source://tty-link//lib/tty/link/terminals/abstract.rb#170
  def term_program; end

  # Read the term program version environment variable
  #
  # @api private
  # @example
  #   terminal.term_program_version
  #   # => "1.2.3"
  # @return [String, nil]
  #
  # source://tty-link//lib/tty/link/terminals/abstract.rb#183
  def term_program_version; end

  # Detect whether a terminal version supports terminal hyperlinks
  #
  # @abstract
  # @api private
  # @example
  #   terminal.version?
  # @raise [TTY::Link::AbstractMethodError] the class doesn't implement the version? method
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/abstract.rb#110
  def version?; end

  class << self
    private

    # Register a terminal class with terminals
    #
    # @api private
    # @param terminal_class [TTY::Link::Terminal::Abstract] the terminal class to register
    # @return [void]
    #
    # source://tty-link//lib/tty/link/terminals/abstract.rb#47
    def inherited(terminal_class); end
  end
end

# The term environment variable name
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/terminals/abstract.rb#20
TTY::Link::Terminals::Abstract::TERM = T.let(T.unsafe(nil), String)

# The term program environment variable name
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/terminals/abstract.rb#28
TTY::Link::Terminals::Abstract::TERM_PROGRAM = T.let(T.unsafe(nil), String)

# The term program version environment variable name
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/terminals/abstract.rb#36
TTY::Link::Terminals::Abstract::TERM_PROGRAM_VERSION = T.let(T.unsafe(nil), String)

# Responsible for detecting hyperlink support in the Alacritty terminal
#
# @api private
#
# source://tty-link//lib/tty/link/terminals/alacritty.rb#11
class TTY::Link::Terminals::Alacritty < ::TTY::Link::Terminals::Abstract
  private

  # Detect Alacritty terminal
  #
  # @api private
  # @example
  #   alacritty.name?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/alacritty.rb#31
  def name?; end

  # Detect any Alacritty version to support terminal hyperlinks
  #
  # @api private
  # @example
  #   alacritty.version?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/alacritty.rb#44
  def version?; end
end

# The Alacritty terminal name pattern
#
# @api private
# @return [Regexp]
#
# source://tty-link//lib/tty/link/terminals/alacritty.rb#17
TTY::Link::Terminals::Alacritty::ALACRITTY = T.let(T.unsafe(nil), Regexp)

# Responsible for detecting hyperlink support in the Contour terminal
#
# @api private
#
# source://tty-link//lib/tty/link/terminals/contour.rb#11
class TTY::Link::Terminals::Contour < ::TTY::Link::Terminals::Abstract
  private

  # Detect Contour terminal
  #
  # @api private
  # @example
  #   contour.name?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/contour.rb#47
  def name?; end

  # Read the terminal name environment variable
  #
  # @api private
  # @example
  #   contour.terminal_name
  #   # => "contour"
  # @return [String, nil]
  #
  # source://tty-link//lib/tty/link/terminals/contour.rb#77
  def terminal_name; end

  # Read the terminal version triple environment variable
  #
  # @api private
  # @example
  #   contour.terminal_version_triple
  #   # => "1.2.3"
  # @return [String, nil]
  #
  # source://tty-link//lib/tty/link/terminals/contour.rb#90
  def terminal_version_triple; end

  # Detect whether the Contour version supports terminal hyperlinks
  #
  # @api private
  # @example
  #   contour.version?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/contour.rb#60
  def version?; end
end

# The Contour terminal name pattern
#
# @api private
# @return [Regexp]
#
# source://tty-link//lib/tty/link/terminals/contour.rb#17
TTY::Link::Terminals::Contour::CONTOUR = T.let(T.unsafe(nil), Regexp)

# The terminal name environment variable name
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/terminals/contour.rb#25
TTY::Link::Terminals::Contour::TERMINAL_NAME = T.let(T.unsafe(nil), String)

# The terminal version triple environment variable name
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/terminals/contour.rb#33
TTY::Link::Terminals::Contour::TERMINAL_VERSION_TRIPLE = T.let(T.unsafe(nil), String)

# The directory name for terminals
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/terminals.rb#14
TTY::Link::Terminals::DIR_NAME = T.let(T.unsafe(nil), String)

# Responsible for detecting hyperlink support in the DomTerm terminal
#
# @api private
#
# source://tty-link//lib/tty/link/terminals/domterm.rb#11
class TTY::Link::Terminals::Domterm < ::TTY::Link::Terminals::Abstract
  private

  # Read the domterm environment variable
  #
  # @api private
  # @example
  #   domterm.domterm
  #   # => "version=1.2.3;tty=/dev/pts/1"
  # @return [String, nil]
  #
  # source://tty-link//lib/tty/link/terminals/domterm.rb#85
  def domterm; end

  # Read the version from the domterm environment variable
  #
  # @api private
  # @example
  #   domterm.domterm_version
  #   # => "1.2.3"
  # @return [String, nil]
  #
  # source://tty-link//lib/tty/link/terminals/domterm.rb#98
  def domterm_version; end

  # Detect DomTerm terminal
  #
  # @api private
  # @example
  #   domterm.name?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/domterm.rb#55
  def name?; end

  # Detect whether the DomTerm version supports terminal hyperlinks
  #
  # @api private
  # @example
  #   domterm.version?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/domterm.rb#68
  def version?; end
end

# The domterm environment variable name
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/terminals/domterm.rb#17
TTY::Link::Terminals::Domterm::DOMTERM = T.let(T.unsafe(nil), String)

# The key and value separator
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/terminals/domterm.rb#25
TTY::Link::Terminals::Domterm::KEY_VAL_SEP = T.let(T.unsafe(nil), String)

# The parameter separator
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/terminals/domterm.rb#33
TTY::Link::Terminals::Domterm::PARAM_SEP = T.let(T.unsafe(nil), String)

# The version parameter pattern
#
# @api private
# @return [Regexp]
#
# source://tty-link//lib/tty/link/terminals/domterm.rb#41
TTY::Link::Terminals::Domterm::VERSION_PARAM = T.let(T.unsafe(nil), Regexp)

# Responsible for detecting hyperlink support in the Foot terminal
#
# @api private
#
# source://tty-link//lib/tty/link/terminals/foot.rb#11
class TTY::Link::Terminals::Foot < ::TTY::Link::Terminals::Abstract
  private

  # Detect Foot terminal
  #
  # @api private
  # @example
  #   foot.name?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/foot.rb#31
  def name?; end

  # Detect any Foot version to support terminal hyperlinks
  #
  # @api private
  # @example
  #   foot.version?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/foot.rb#44
  def version?; end
end

# The Foot terminal name pattern
#
# @api private
# @return [Regexp]
#
# source://tty-link//lib/tty/link/terminals/foot.rb#17
TTY::Link::Terminals::Foot::FOOT = T.let(T.unsafe(nil), Regexp)

# Responsible for detecting hyperlink support in the Hyper terminal
#
# @api private
#
# source://tty-link//lib/tty/link/terminals/hyper.rb#11
class TTY::Link::Terminals::Hyper < ::TTY::Link::Terminals::Abstract
  private

  # Detect Hyper terminal
  #
  # @api private
  # @example
  #   hyper.name?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/hyper.rb#31
  def name?; end

  # Detect whether the Hyper version supports terminal hyperlinks
  #
  # @api private
  # @example
  #   hyper.version?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/hyper.rb#44
  def version?; end
end

# The Hyper terminal name pattern
#
# @api private
# @return [Regexp]
#
# source://tty-link//lib/tty/link/terminals/hyper.rb#17
TTY::Link::Terminals::Hyper::HYPER = T.let(T.unsafe(nil), Regexp)

# Responsible for detecting hyperlink support in the iTerm terminal
#
# @api private
#
# source://tty-link//lib/tty/link/terminals/iterm.rb#11
class TTY::Link::Terminals::Iterm < ::TTY::Link::Terminals::Abstract
  private

  # Detect iTerm terminal
  #
  # @api private
  # @example
  #   iterm.name?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/iterm.rb#31
  def name?; end

  # Detect whether the iTerm version supports terminal hyperlinks
  #
  # @api private
  # @example
  #   iterm.version?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/iterm.rb#44
  def version?; end
end

# The iTerm terminal name pattern
#
# @api private
# @return [Regexp]
#
# source://tty-link//lib/tty/link/terminals/iterm.rb#17
TTY::Link::Terminals::Iterm::ITERM = T.let(T.unsafe(nil), Regexp)

# Responsible for detecting hyperlink support in the JediTerm terminal
#
# @api private
#
# source://tty-link//lib/tty/link/terminals/jediterm.rb#11
class TTY::Link::Terminals::Jediterm < ::TTY::Link::Terminals::Abstract
  private

  # Detect JediTerm terminal
  #
  # @api private
  # @example
  #   jediterm.name?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/jediterm.rb#39
  def name?; end

  # Read the terminal emulator environment variable
  #
  # @api private
  # @example
  #   jediterm.terminal_emulator
  #   # => "JetBrains-JediTerm"
  # @return [String, nil]
  #
  # source://tty-link//lib/tty/link/terminals/jediterm.rb#65
  def terminal_emulator; end

  # Detect any JediTerm version to support terminal hyperlinks
  #
  # @api private
  # @example
  #   jediterm.version?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/jediterm.rb#52
  def version?; end
end

# The JediTerm terminal name pattern
#
# @api private
# @return [Regexp]
#
# source://tty-link//lib/tty/link/terminals/jediterm.rb#17
TTY::Link::Terminals::Jediterm::JEDITERM = T.let(T.unsafe(nil), Regexp)

# The terminal emulator environment variable name
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/terminals/jediterm.rb#25
TTY::Link::Terminals::Jediterm::TERMINAL_EMULATOR = T.let(T.unsafe(nil), String)

# Responsible for detecting hyperlink support in the kitty terminal
#
# @api private
#
# source://tty-link//lib/tty/link/terminals/kitty.rb#9
class TTY::Link::Terminals::Kitty < ::TTY::Link::Terminals::Abstract
  private

  # Detect kitty terminal
  #
  # @api private
  # @example
  #   kitty.name?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/kitty.rb#29
  def name?; end

  # Detect any kitty version to support terminal hyperlinks
  #
  # @api private
  # @example
  #   kitty.version?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/kitty.rb#42
  def version?; end
end

# The kitty terminal name pattern
#
# @api private
# @return [Regexp]
#
# source://tty-link//lib/tty/link/terminals/kitty.rb#15
TTY::Link::Terminals::Kitty::KITTY = T.let(T.unsafe(nil), Regexp)

# Responsible for detecting hyperlink support in the Konsole terminal
#
# @api private
#
# source://tty-link//lib/tty/link/terminals/konsole.rb#11
class TTY::Link::Terminals::Konsole < ::TTY::Link::Terminals::Abstract
  private

  # Read the Konsole version environment variable
  #
  # @api private
  # @example
  #   konsole.konsole_version
  #   # => "1.2.3"
  # @return [String, nil]
  #
  # source://tty-link//lib/tty/link/terminals/konsole.rb#59
  def konsole_version; end

  # Detect Konsole terminal
  #
  # @api private
  # @example
  #   konsole.name?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/konsole.rb#31
  def name?; end

  # Detect whether the Konsole version supports terminal hyperlinks
  #
  # @api private
  # @example
  #   konsole.version?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/konsole.rb#44
  def version?; end
end

# The Konsole version environment variable name
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/terminals/konsole.rb#17
TTY::Link::Terminals::Konsole::KONSOLE_VERSION = T.let(T.unsafe(nil), String)

# Responsible for detecting hyperlink support in the mintty terminal
#
# @api private
#
# source://tty-link//lib/tty/link/terminals/mintty.rb#11
class TTY::Link::Terminals::Mintty < ::TTY::Link::Terminals::Abstract
  private

  # Detect mintty terminal
  #
  # @api private
  # @example
  #   mintty.name?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/mintty.rb#31
  def name?; end

  # Detect whether the mintty version supports terminal hyperlinks
  #
  # @api private
  # @example
  #   mintty.version?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/mintty.rb#44
  def version?; end
end

# The mintty terminal name pattern
#
# @api private
# @return [Regexp]
#
# source://tty-link//lib/tty/link/terminals/mintty.rb#17
TTY::Link::Terminals::Mintty::MINTTY = T.let(T.unsafe(nil), Regexp)

# The Ruby file pattern
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/terminals.rb#22
TTY::Link::Terminals::RUBY_FILE = T.let(T.unsafe(nil), String)

# Responsible for detecting hyperlink support in the Rio terminal
#
# @api private
#
# source://tty-link//lib/tty/link/terminals/rio.rb#11
class TTY::Link::Terminals::Rio < ::TTY::Link::Terminals::Abstract
  private

  # Detect Rio terminal
  #
  # @api private
  # @example
  #   rio.name?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/rio.rb#31
  def name?; end

  # Detect whether the Rio version supports terminal hyperlinks
  #
  # @api private
  # @example
  #   rio.version?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/rio.rb#44
  def version?; end
end

# The Rio terminal name pattern
#
# @api private
# @return [Regexp]
#
# source://tty-link//lib/tty/link/terminals/rio.rb#17
TTY::Link::Terminals::Rio::RIO = T.let(T.unsafe(nil), Regexp)

# Responsible for detecting hyperlink support in the Tabby terminal
#
# @api private
#
# source://tty-link//lib/tty/link/terminals/tabby.rb#11
class TTY::Link::Terminals::Tabby < ::TTY::Link::Terminals::Abstract
  private

  # Detect Tabby terminal
  #
  # @api private
  # @example
  #   tabby.name?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/tabby.rb#31
  def name?; end

  # Detect any Tabby version to support terminal hyperlinks
  #
  # @api private
  # @example
  #   tabby.version?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/tabby.rb#44
  def version?; end
end

# The Tabby terminal name pattern
#
# @api private
# @return [Regexp]
#
# source://tty-link//lib/tty/link/terminals/tabby.rb#17
TTY::Link::Terminals::Tabby::TABBY = T.let(T.unsafe(nil), Regexp)

# Responsible for detecting hyperlink support in the Terminology terminal
#
# @api private
#
# source://tty-link//lib/tty/link/terminals/terminology.rb#11
class TTY::Link::Terminals::Terminology < ::TTY::Link::Terminals::Abstract
  private

  # Detect Terminology terminal
  #
  # @api private
  # @example
  #   terminology.name?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/terminology.rb#31
  def name?; end

  # Detect whether the Terminology version supports terminal hyperlinks
  #
  # @api private
  # @example
  #   terminology.version?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/terminology.rb#44
  def version?; end
end

# The Terminology terminal name pattern
#
# @api private
# @return [Regexp]
#
# source://tty-link//lib/tty/link/terminals/terminology.rb#17
TTY::Link::Terminals::Terminology::TERMINOLOGY = T.let(T.unsafe(nil), Regexp)

# Responsible for detecting hyperlink support in the VSCode terminal
#
# @api private
#
# source://tty-link//lib/tty/link/terminals/vscode.rb#11
class TTY::Link::Terminals::Vscode < ::TTY::Link::Terminals::Abstract
  private

  # Detect VSCode terminal
  #
  # @api private
  # @example
  #   vscode.name?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/vscode.rb#31
  def name?; end

  # Detect whether the VSCode version supports terminal hyperlinks
  #
  # @api private
  # @example
  #   vscode.version?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/vscode.rb#44
  def version?; end
end

# The VSCode terminal name pattern
#
# @api private
# @return [Regexp]
#
# source://tty-link//lib/tty/link/terminals/vscode.rb#17
TTY::Link::Terminals::Vscode::VSCODE = T.let(T.unsafe(nil), Regexp)

# Responsible for detecting hyperlink support in the VTE-based terminal
#
# @api private
#
# source://tty-link//lib/tty/link/terminals/vte.rb#11
class TTY::Link::Terminals::Vte < ::TTY::Link::Terminals::Abstract
  private

  # Detect VTE terminal
  #
  # @api private
  # @example
  #   vte.name?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/vte.rb#31
  def name?; end

  # Detect whether the VTE version supports terminal hyperlinks
  #
  # @api private
  # @example
  #   vte.version?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/vte.rb#44
  def version?; end

  # Read the VTE version environment variable
  #
  # @api private
  # @example
  #   vte.vte_version
  #   # => "5100"
  # @return [String, nil]
  #
  # source://tty-link//lib/tty/link/terminals/vte.rb#59
  def vte_version; end
end

# The VTE version environment variable name
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/terminals/vte.rb#17
TTY::Link::Terminals::Vte::VTE_VERSION = T.let(T.unsafe(nil), String)

# Responsible for detecting hyperlink support in the WezTerm terminal
#
# @api private
#
# source://tty-link//lib/tty/link/terminals/wezterm.rb#11
class TTY::Link::Terminals::Wezterm < ::TTY::Link::Terminals::Abstract
  private

  # Detect WezTerm terminal
  #
  # @api private
  # @example
  #   wezterm.name?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/wezterm.rb#47
  def name?; end

  # Detect whether the WezTerm version supports terminal hyperlinks
  #
  # @api private
  # @example
  #   wezterm.version?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/wezterm.rb#60
  def version?; end
end

# The version release
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/terminals/wezterm.rb#25
TTY::Link::Terminals::Wezterm::VERSION_RELEASE = T.let(T.unsafe(nil), String)

# The version separator
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/terminals/wezterm.rb#33
TTY::Link::Terminals::Wezterm::VERSION_SEPARATOR = T.let(T.unsafe(nil), String)

# The WezTerm terminal name pattern
#
# @api private
# @return [Regexp]
#
# source://tty-link//lib/tty/link/terminals/wezterm.rb#17
TTY::Link::Terminals::Wezterm::WEZTERM = T.let(T.unsafe(nil), Regexp)

# Responsible for detecting hyperlink support in the Windows Terminal
#
# @api private
#
# source://tty-link//lib/tty/link/terminals/wt.rb#11
class TTY::Link::Terminals::Wt < ::TTY::Link::Terminals::Abstract
  private

  # Detect Windows Terminal
  #
  # @api private
  # @example
  #   wt.name?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/wt.rb#31
  def name?; end

  # Detect any Windows Terminal version to support terminal hyperlinks
  #
  # @api private
  # @example
  #   wt.version?
  #   # => true
  # @return [Boolean]
  #
  # source://tty-link//lib/tty/link/terminals/wt.rb#44
  def version?; end

  # Read the wt session environment variable
  #
  # @api private
  # @example
  #   wt.wt_session
  #   # => "the-unique-identifier"
  # @return [String, nil]
  #
  # source://tty-link//lib/tty/link/terminals/wt.rb#57
  def wt_session; end
end

# The wt session environment variable name
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/terminals/wt.rb#17
TTY::Link::Terminals::Wt::WT_SESSION = T.let(T.unsafe(nil), String)

# source://tty-link//lib/tty/link/version.rb#5
TTY::Link::VERSION = T.let(T.unsafe(nil), String)

# Raised when a parameter value doesn't match the allowed values
#
# @api public
#
# source://tty-link//lib/tty/link/errors.rb#36
class TTY::Link::ValueError < ::TTY::Link::Error
  # Create a {TTY::Link::ValueError} instance
  #
  # @api private
  # @example
  #   TTY::Link::ValueError.new(:name, :invalid, %i[valid_a valid_b])
  # @param param_name [Symbol] the parameter name
  # @param invalid_value [Object] the invalid value
  # @param allowed_values [Array] the allowed values
  # @return [ValueError] a new instance of ValueError
  #
  # source://tty-link//lib/tty/link/errors.rb#67
  def initialize(param_name, invalid_value, allowed_values); end
end

# The error message template
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/errors.rb#42
TTY::Link::ValueError::MESSAGE = T.let(T.unsafe(nil), String)

# The allowed values separator
#
# @api private
# @return [String]
#
# source://tty-link//lib/tty/link/errors.rb#51
TTY::Link::ValueError::VALUES_SEPARATOR = T.let(T.unsafe(nil), String)
