# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tty-pie` gem.
# Please instead update this file by running `bin/tapioca gem tty-pie`.


# source://tty-pie//lib/tty/pie/data_item.rb#5
module TTY; end

# source://tty-pie//lib/tty/pie/data_item.rb#6
class TTY::Pie
  # Create pie chart
  #
  # @api public
  # @example
  #   data = [ { name: "BTC", value: 5977, fill: "*" } ]
  #   pie_chart = TTY::Pie.new(data: data, radius: 2)
  # @param top [Integer]
  # @param left [Integer]
  # @param legend [Hash, Boolean]
  # @param fill [String]
  # @param aspect_ratio [Float]
  # @param radius [Integer]
  # @param data [Array[Hash]] the data to display in each slice
  # @return [Pie] a new instance of Pie
  #
  # source://tty-pie//lib/tty/pie.rb#51
  def initialize(data: T.unsafe(nil), top: T.unsafe(nil), left: T.unsafe(nil), radius: T.unsafe(nil), legend: T.unsafe(nil), fill: T.unsafe(nil), aspect_ratio: T.unsafe(nil), colors: T.unsafe(nil)); end

  # Add a data item
  #
  # @api public
  # @param [Hash]
  # @return [self]
  #
  # source://tty-pie//lib/tty/pie.rb#100
  def <<(item); end

  # Add a data item
  #
  # @api public
  # @param [Hash]
  # @return [self]
  #
  # source://tty-pie//lib/tty/pie.rb#100
  def add(item); end

  # Returns the value of attribute aspect_ratio.
  #
  # source://tty-pie//lib/tty/pie.rb#25
  def aspect_ratio; end

  # Returns the value of attribute center_x.
  #
  # source://tty-pie//lib/tty/pie.rb#21
  def center_x; end

  # Returns the value of attribute center_y.
  #
  # source://tty-pie//lib/tty/pie.rb#21
  def center_y; end

  # Reset data
  #
  # @api public
  #
  # source://tty-pie//lib/tty/pie.rb#174
  def clear; end

  # Returns the value of attribute colors.
  #
  # source://tty-pie//lib/tty/pie.rb#31
  def colors; end

  # Returns the value of attribute cursor.
  #
  # source://tty-pie//lib/tty/pie.rb#27
  def cursor; end

  # Convert data into DataItems
  #
  # @api private
  # @return [Array[DataItem]]
  #
  # source://tty-pie//lib/tty/pie.rb#83
  def data_items; end

  # Returns the value of attribute fill.
  #
  # source://tty-pie//lib/tty/pie.rb#29
  def fill; end

  # Returns the value of attribute left.
  #
  # source://tty-pie//lib/tty/pie.rb#19
  def left; end

  # Returns the value of attribute legend.
  #
  # source://tty-pie//lib/tty/pie.rb#33
  def legend; end

  # Returns the value of attribute radius.
  #
  # source://tty-pie//lib/tty/pie.rb#23
  def radius; end

  # Draw a pie based on the provided data
  #
  # @api public
  # @return [String]
  #
  # source://tty-pie//lib/tty/pie.rb#121
  def render; end

  # Reset data
  #
  # @api public
  #
  # source://tty-pie//lib/tty/pie.rb#174
  def reset; end

  # Draw a pie based on the provided data
  #
  # @api public
  # @return [String]
  #
  # source://tty-pie//lib/tty/pie.rb#121
  def to_s; end

  # Returns the value of attribute top.
  #
  # source://tty-pie//lib/tty/pie.rb#19
  def top; end

  # Total for the data items
  #
  # @api private
  # @return [Integer]
  #
  # source://tty-pie//lib/tty/pie.rb#74
  def total; end

  # Replace current data with new set
  #
  # @api public
  # @param [Array[Hash]]
  #
  # source://tty-pie//lib/tty/pie.rb#111
  def update(data); end

  private

  # All angles from the data to slice the pie
  #
  # @api private
  # @return [Array[Numeric]]
  #
  # source://tty-pie//lib/tty/pie.rb#187
  def data_angles(items); end

  # The space between a legend and a chart
  #
  # @api private
  # @return [Integer]
  #
  # source://tty-pie//lib/tty/pie.rb#201
  def legend_left; end

  # The space between each legend item
  #
  # @api private
  # @return [Integer]
  #
  # source://tty-pie//lib/tty/pie.rb#210
  def legend_line; end

  # Convert radians to degrees
  #
  # @api private
  # @param radians [Float]
  # @return [Float]
  #
  # source://tty-pie//lib/tty/pie.rb#230
  def radian_to_degree(radians); end

  # Select data item index based on angle
  #
  # @api private
  # @return [Integer]
  #
  # source://tty-pie//lib/tty/pie.rb#219
  def select_data_item(angle, angles); end
end

# Encapsulates a single data item
#
# source://tty-pie//lib/tty/pie/data_item.rb#8
class TTY::Pie::DataItem
  # Creat a DataItem
  #
  # @api private
  # @return [DataItem] a new instance of DataItem
  #
  # source://tty-pie//lib/tty/pie/data_item.rb#26
  def initialize(name, value, percent, color, fill); end

  # The item start angle
  #
  # @api private
  #
  # source://tty-pie//lib/tty/pie/data_item.rb#38
  def angle; end

  # Sets the attribute angle
  #
  # @param value the value to set the attribute angle to.
  #
  # source://tty-pie//lib/tty/pie/data_item.rb#17
  def angle=(_arg0); end

  # Returns the value of attribute color.
  #
  # source://tty-pie//lib/tty/pie/data_item.rb#19
  def color; end

  # Sets the attribute color
  #
  # @param value the value to set the attribute color to.
  #
  # source://tty-pie//lib/tty/pie/data_item.rb#19
  def color=(_arg0); end

  # Returns the value of attribute fill.
  #
  # source://tty-pie//lib/tty/pie/data_item.rb#21
  def fill; end

  # Sets the attribute fill
  #
  # @param value the value to set the attribute fill to.
  #
  # source://tty-pie//lib/tty/pie/data_item.rb#21
  def fill=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://tty-pie//lib/tty/pie/data_item.rb#11
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://tty-pie//lib/tty/pie/data_item.rb#11
  def name=(_arg0); end

  # Convert a number to a currency
  #
  # @api private
  # @param value [Numeric]
  # @param precision [Integer]
  # @param delimiter [String]
  # @return [String]
  #
  # source://tty-pie//lib/tty/pie/data_item.rb#71
  def number_to_currency(value, precision: T.unsafe(nil), delimiter: T.unsafe(nil)); end

  # Returns the value of attribute percent.
  #
  # source://tty-pie//lib/tty/pie/data_item.rb#15
  def percent; end

  # Sets the attribute percent
  #
  # @param value the value to set the attribute percent to.
  #
  # source://tty-pie//lib/tty/pie/data_item.rb#15
  def percent=(_arg0); end

  # Convert a data item into a legend label
  #
  # @api private
  # @param legend [Hash]
  # @return [String]
  #
  # source://tty-pie//lib/tty/pie/data_item.rb#49
  def to_label(legend); end

  # Returns the value of attribute value.
  #
  # source://tty-pie//lib/tty/pie/data_item.rb#13
  def value; end

  # Sets the attribute value
  #
  # @param value the value to set the attribute value to.
  #
  # source://tty-pie//lib/tty/pie/data_item.rb#13
  def value=(_arg0); end
end

# source://tty-pie//lib/tty/pie/data_item.rb#9
TTY::Pie::DataItem::LABEL_FORMAT = T.let(T.unsafe(nil), String)

# source://tty-pie//lib/tty/pie.rb#11
TTY::Pie::FULL_CIRCLE_DEGREES = T.let(T.unsafe(nil), Integer)

# source://tty-pie//lib/tty/pie.rb#17
TTY::Pie::LEGEND_LEFT_SPACE = T.let(T.unsafe(nil), Integer)

# source://tty-pie//lib/tty/pie.rb#15
TTY::Pie::LEGEND_LINE_SPACE = T.let(T.unsafe(nil), Integer)

# source://tty-pie//lib/tty/pie.rb#13
TTY::Pie::POINT_SYMBOL = T.let(T.unsafe(nil), String)

# source://tty-pie//lib/tty/pie/version.rb#5
TTY::Pie::VERSION = T.let(T.unsafe(nil), String)
