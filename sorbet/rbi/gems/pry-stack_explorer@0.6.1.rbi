# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pry-stack_explorer` gem.
# Please instead update this file by running `bin/tapioca gem pry-stack_explorer`.


# source://pry-stack_explorer//lib/pry-stack_explorer/version.rb#1
module PryStackExplorer
  class << self
    # Simple test to check whether two `Binding` objects are equal.
    #
    # @param b1 [Binding] First binding.
    # @param b2 [Binding] Second binding.
    # @return [Boolean] Whether the `Binding`s are equal.
    #
    # source://pry-stack_explorer//lib/pry-stack_explorer.rb#109
    def bindings_equal?(b1, b2); end

    # Clear the stack of frame managers for the Pry instance
    #
    # @param _pry_ [Pry] The Pry instance associated with the frame managers
    #
    # source://pry-stack_explorer//lib/pry-stack_explorer.rb#93
    def clear_frame_managers(_pry_); end

    # Create a `Pry::FrameManager` object and push it onto the frame
    # manager stack for the relevant `_pry_` instance.
    #
    # @param bindings [Array] The array of bindings (frames)
    # @param _pry_ [Pry] The Pry instance associated with the frame manager
    #
    # source://pry-stack_explorer//lib/pry-stack_explorer.rb#35
    def create_and_push_frame_manager(bindings, _pry_, options = T.unsafe(nil)); end

    # Clear the stack of frame managers for the Pry instance
    #
    # @param _pry_ [Pry] The Pry instance associated with the frame managers
    #
    # source://pry-stack_explorer//lib/pry-stack_explorer.rb#93
    def delete_frame_managers(_pry_); end

    # @return [Hash] The hash storing all frames for all Pry instances for
    #   the current thread.
    #
    # source://pry-stack_explorer//lib/pry-stack_explorer.rb#19
    def frame_hash; end

    # @return [PryStackExplorer::FrameManager] The currently active frame manager
    #
    # source://pry-stack_explorer//lib/pry-stack_explorer.rb#101
    def frame_manager(_pry_); end

    # Return the complete frame manager stack for the Pry instance
    #
    # @param _pry_ [Pry] The Pry instance associated with the frame
    #   managers
    # @return [Array] The stack of Pry::FrameManager objections
    #
    # source://pry-stack_explorer//lib/pry-stack_explorer.rb#27
    def frame_managers(_pry_); end

    # Delete the currently active frame manager
    #
    # @param _pry_ [Pry] The Pry instance associated with the frame
    #   managers.
    # @return [Pry::FrameManager] The popped frame manager.
    #
    # source://pry-stack_explorer//lib/pry-stack_explorer.rb#60
    def pop_frame_manager(_pry_); end

    private

    # Restore the Pry instance to operate on the previous
    # binding. Also responsible for restoring Pry instance's backtrace.
    #
    # @param popped_fm [Pry::FrameManager] The recently popped frame manager.
    # @param _pry_ [Pry] The Pry instance associated with the frame managers.
    #
    # source://pry-stack_explorer//lib/pry-stack_explorer.rb#72
    def pop_helper(popped_fm, _pry_); end

    # Update the Pry instance to operate on the specified frame for the
    # current frame manager.
    #
    # @param fm [PryStackExplorer::FrameManager] The active frame manager.
    # @param options [Hash] The options hash.
    #
    # source://pry-stack_explorer//lib/pry-stack_explorer.rb#46
    def push_helper(fm, options = T.unsafe(nil)); end
  end
end

# source://pry-stack_explorer//lib/pry-stack_explorer/commands.rb#133
PryStackExplorer::Commands = T.let(T.unsafe(nil), Pry::CommandSet)

# source://pry-stack_explorer//lib/pry-stack_explorer/commands.rb#2
module PryStackExplorer::FrameHelpers
  private

  # source://pry-stack_explorer//lib/pry-stack_explorer/commands.rb#115
  def find_frame_by_block(up_or_down); end

  # source://pry-stack_explorer//lib/pry-stack_explorer/commands.rb#100
  def find_frame_by_object_regex(class_regex, method_regex, up_or_down); end

  # Regexp.new(args[0])
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/commands.rb#88
  def find_frame_by_regex(regex, up_or_down); end

  # Return a description of the frame (binding).
  # This is only useful for regular old bindings that have not been
  # enhanced by `#of_caller`.
  #
  # @param b [Binding] The binding.
  # @return [String] A description of the frame (binding).
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/commands.rb#28
  def frame_description(b); end

  # Return a description of the passed binding object. Accepts an
  # optional `verbose` parameter.
  #
  # @param b [Binding] The binding.
  # @param verbose [Boolean] Whether to generate a verbose description.
  # @return [String] The description of the binding.
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/commands.rb#48
  def frame_info(b, verbose = T.unsafe(nil)); end

  # @return [PryStackExplorer::FrameManager] The active frame manager for
  #   the current `Pry` instance.
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/commands.rb#7
  def frame_manager; end

  # @return [Array<PryStackExplorer::FrameManager>] All the frame
  #   managers for the current `Pry` instance.
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/commands.rb#13
  def frame_managers; end

  # @return [Boolean] Whether there is a context to return to once
  #   the current `frame_manager` is popped.
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/commands.rb#19
  def prior_context_exists?; end

  # @param meth_obj [Pry::Method] The method object.
  # @return [String] Signature for the method object in Class#method format.
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/commands.rb#69
  def signature_with_owner(meth_obj); end
end

# This class represents a call-stack. It stores the
# frames that make up the stack and is responsible for updating the
# associated Pry instance to reflect the active frame. It is fully Enumerable.
#
# source://pry-stack_explorer//lib/pry-stack_explorer/frame_manager.rb#6
class PryStackExplorer::FrameManager
  include ::Enumerable

  # @return [FrameManager] a new instance of FrameManager
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/frame_manager.rb#27
  def initialize(bindings, _pry_); end

  # @return [Fixnum] The index of the active frame (binding) in the call-stack.
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/frame_manager.rb#14
  def binding_index; end

  # @return [Fixnum] The index of the active frame (binding) in the call-stack.
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/frame_manager.rb#14
  def binding_index=(_arg0); end

  # @return [Array<Binding>] The array of bindings that constitute
  #   the call-stack.
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/frame_manager.rb#11
  def bindings; end

  # @return [Array<Binding>] The array of bindings that constitute
  #   the call-stack.
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/frame_manager.rb#11
  def bindings=(_arg0); end

  # Change active frame to the one indexed by `index`.
  # Note that indexing base is `0`
  #
  # @param index [Fixnum] The index of the frame.
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/frame_manager.rb#71
  def change_frame_to(index, run_whereami = T.unsafe(nil)); end

  # @return [Binding] The currently active frame
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/frame_manager.rb#48
  def current_frame; end

  # Iterate over all frames
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/frame_manager.rb#37
  def each(&block); end

  # @return [Array] The backtrace of the Pry instance before the
  #   FrameManager took over.
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/frame_manager.rb#25
  def prior_backtrace; end

  # @return [Binding] The binding of the Pry instance before the
  #   FrameManager took over.
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/frame_manager.rb#21
  def prior_binding; end

  # Ensure the Pry instance's active binding is the frame manager's
  # active binding.
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/frame_manager.rb#43
  def refresh_frame(run_whereami = T.unsafe(nil)); end

  # Set the binding index (aka frame index), but raising an Exception when invalid
  # index received. Also converts negative indices to their positive counterparts.
  #
  # @param index [Fixnum] The index.
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/frame_manager.rb#55
  def set_binding_index_safely(index); end

  # @return [Hash] A hash for user defined data
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/frame_manager.rb#17
  def user; end
end

# source://pry-stack_explorer//lib/pry-stack_explorer/commands.rb#342
PryStackExplorer::LOCATION_LAMBDA = T.let(T.unsafe(nil), Proc)

# source://pry-stack_explorer//lib/pry-stack_explorer/version.rb#2
PryStackExplorer::VERSION = T.let(T.unsafe(nil), String)

# source://pry-stack_explorer//lib/pry-stack_explorer/when_started_hook.rb#2
class PryStackExplorer::WhenStartedHook
  include ::Pry::Helpers::BaseHelpers

  # source://pry-stack_explorer//lib/pry-stack_explorer/when_started_hook.rb#23
  def call(target, options, _pry_); end

  # source://pry-stack_explorer//lib/pry-stack_explorer/when_started_hook.rb#5
  def caller_bindings(target); end

  private

  # @return [Array<Array<Binding, Fixnum>>]
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/when_started_hook.rb#84
  def internal_frames_with_indices(bindings); end

  # When a pry session is started within a pry session
  #
  # @return [Boolean]
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/when_started_hook.rb#76
  def nested_session?(bindings); end

  # binding.pry frame
  #
  # @return [Boolean]
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/when_started_hook.rb#70
  def pry_method_frame?(binding); end

  # remove pry-nav / pry-debugger / pry-byebug frames
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/when_started_hook.rb#64
  def remove_debugger_frames(bindings); end

  # remove internal frames related to setting up the session
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/when_started_hook.rb#48
  def remove_internal_frames(bindings); end

  # @return [Boolean]
  #
  # source://pry-stack_explorer//lib/pry-stack_explorer/when_started_hook.rb#92
  def valid_call_stack?(bindings); end
end

# source://pry-stack_explorer//lib/pry-stack_explorer.rb#14
SE = PryStackExplorer
