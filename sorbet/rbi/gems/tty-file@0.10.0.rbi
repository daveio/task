# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tty-file` gem.
# Please instead update this file by running `bin/tapioca gem tty-file`.


# source://tty-file//lib/tty/file/read_backward_file.rb#3
class ReadBackwardFile
  # Create a ReadBackwardFile
  #
  # @api public
  # @param file [File] the file to read backward from
  # @param chunk_size [Integer] the chunk size used to step through the file backwards
  # @return [ReadBackwardFile] a new instance of ReadBackwardFile
  #
  # source://tty-file//lib/tty/file/read_backward_file.rb#15
  def initialize(file, chunk_size = T.unsafe(nil)); end

  # Returns the value of attribute chunk_size.
  #
  # source://tty-file//lib/tty/file/read_backward_file.rb#4
  def chunk_size; end

  # Read file in chunks
  #
  # @api public
  # @yield [String] the chunk from file content
  #
  # source://tty-file//lib/tty/file/read_backward_file.rb#27
  def each_chunk; end

  # Returns the value of attribute file.
  #
  # source://tty-file//lib/tty/file/read_backward_file.rb#4
  def file; end
end

# source://tty-file//lib/tty/file/differ.rb#6
module TTY; end

# source://tty-file//lib/tty/file/differ.rb#7
module TTY::File
  private

  # Create new file if doesn't exist
  #
  # @api public
  # @example
  #   create_file("doc/README.md", "# Title header")
  # @example
  #   create_file "doc/README.md" do
  #   "# Title Header"
  #   end
  # @param context [Object] the binding to use for the template
  # @param color [Symbol] the color name to use for logging
  # @param force [Boolean] forces ovewrite if conflict present
  # @param verbose [Boolean] when true log the action status to stdout
  # @param noop [Boolean] when true do not execute the action
  # @param skip [Boolean] when true skip the action
  # @param quiet [Boolean] when true leaves prompt output, otherwise clears
  # @param relative_path [String, Pathname]
  # @param content [String|nil] the content to add to file
  #
  # source://tty-file//lib/tty/file.rb#249
  def add_file(relative_path, *args, context: T.unsafe(nil), force: T.unsafe(nil), skip: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), quiet: T.unsafe(nil), &block); end

  # Append to a file
  #
  # @api public
  # @example
  #   append_to_file("Gemfile", "gem 'tty'")
  # @example
  #   append_to_file("Gemfile") do
  #   "gem 'tty'"
  #   end
  # @param relative_path [String, Pathname]
  # @param content [Array[String]] the content to append to file
  #
  # source://tty-file//lib/tty/file.rb#574
  def add_to_file(relative_path, *args, verbose: T.unsafe(nil), color: T.unsafe(nil), force: T.unsafe(nil), noop: T.unsafe(nil), &block); end

  # Append to a file
  #
  # @api public
  # @example
  #   append_to_file("Gemfile", "gem 'tty'")
  # @example
  #   append_to_file("Gemfile") do
  #   "gem 'tty'"
  #   end
  # @param relative_path [String, Pathname]
  # @param content [Array[String]] the content to append to file
  #
  # source://tty-file//lib/tty/file.rb#574
  def append_to_file(relative_path, *args, verbose: T.unsafe(nil), color: T.unsafe(nil), force: T.unsafe(nil), noop: T.unsafe(nil), &block); end

  # Check if file is binary
  #
  # @api public
  # @example
  #   binary?("Gemfile") # => false
  # @example
  #   binary?("image.jpg") # => true
  # @param relative_path [String, Pathname] the path to file to check
  # @return [Boolean] Returns `true` if the file is binary, `false` otherwise
  #
  # source://tty-file//lib/tty/file.rb#53
  def binary?(relative_path); end

  # Check if file is binary or exceeds threshold size
  #
  # @api private
  #
  # source://tty-file//lib/tty/file.rb#474
  def check_binary_or_large(file, threshold); end

  # Check if path exists
  #
  # @api private
  # @param path [String]
  # @raise [ArgumentError]
  #
  # source://tty-file//lib/tty/file.rb#798
  def check_path(path); end

  # Create checksum for a file, io or string objects
  #
  # @api public
  # @example
  #   checksum_file("/path/to/file")
  # @example
  #   checksum_file("Some string content", "md5")
  # @param source [File, IO, String, Pathname] the source to generate checksum for
  # @param mode [String]
  # @param noop [Boolean] when true skip this action
  # @return [String] the generated hex value
  #
  # source://tty-file//lib/tty/file.rb#114
  def checksum_file(source, *args, noop: T.unsafe(nil)); end

  # Change file permissions
  #
  # @api public
  # @example
  #   chmod("Gemilfe", TTY::File::U_R | TTY::File::U_W)
  # @example
  #   chmod("Gemfile", "u+x,g+x")
  # @example
  #   chmod("Gemfile", 0755)
  # @param verbose [Boolean] when true displays logging information
  # @param color [Symbol] the name for the color to format display message, :green by default
  # @param relative_path [String, Pathname] the string or path to a file
  # @param permisssions [Integer, String] the string or octal number for permissoins
  # @param noop [Boolean] when true skips this action
  #
  # source://tty-file//lib/tty/file.rb#144
  def chmod(relative_path, permissions, verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil)); end

  # Copy directory recursively from source to destination path
  #
  # Any files names wrapped within % sign will be expanded by
  # executing corresponding method and inserting its value.
  # Assuming the following directory structure:
  #
  #  app/
  #    %name%.rb
  #    command.rb.erb
  #    README.md
  #
  #  Invoking:
  #    copy_directory("app", "new_app")
  #  The following directory structure should be created where
  #  name resolves to "cli" value:
  #
  #  new_app/
  #    cli.rb
  #    command.rb
  #    README
  #
  # @api public
  # @example
  #   copy_directory("app", "new_app", recursive: false)
  # @example
  #   copy_directory("app", "new_app", exclude: /docs/)
  # @param source_path [String, Pathname] the source directory to copy files from
  # @param preserve [Boolean] when true, the owner, group, permissions and modified time
  #   are preserved on the copied file, defaults to false.
  # @param recursive [Boolean] when false, copies only top level files, defaults to true
  # @param exclude [Regexp] a regex that specifies files to ignore when copying
  #
  # source://tty-file//lib/tty/file.rb#372
  def copy_dir(source_path, *args, context: T.unsafe(nil), force: T.unsafe(nil), skip: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), preserve: T.unsafe(nil), recursive: T.unsafe(nil), exclude: T.unsafe(nil), &block); end

  # Copy directory recursively from source to destination path
  #
  # Any files names wrapped within % sign will be expanded by
  # executing corresponding method and inserting its value.
  # Assuming the following directory structure:
  #
  #  app/
  #    %name%.rb
  #    command.rb.erb
  #    README.md
  #
  #  Invoking:
  #    copy_directory("app", "new_app")
  #  The following directory structure should be created where
  #  name resolves to "cli" value:
  #
  #  new_app/
  #    cli.rb
  #    command.rb
  #    README
  #
  # @api public
  # @example
  #   copy_directory("app", "new_app", recursive: false)
  # @example
  #   copy_directory("app", "new_app", exclude: /docs/)
  # @param source_path [String, Pathname] the source directory to copy files from
  # @param preserve [Boolean] when true, the owner, group, permissions and modified time
  #   are preserved on the copied file, defaults to false.
  # @param recursive [Boolean] when false, copies only top level files, defaults to true
  # @param exclude [Regexp] a regex that specifies files to ignore when copying
  #
  # source://tty-file//lib/tty/file.rb#372
  def copy_directory(source_path, *args, context: T.unsafe(nil), force: T.unsafe(nil), skip: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), preserve: T.unsafe(nil), recursive: T.unsafe(nil), exclude: T.unsafe(nil), &block); end

  # Copy file from the relative source to the relative
  # destination running it through ERB.
  #
  # @api public
  # @example
  #   vars = OpenStruct.new
  #   vars[:name] = "foo"
  #   copy_file "templates/%name%.rb", "app/%name%.rb", context: vars
  # @example
  #   copy_file "templates/test.rb", "app/test.rb"
  # @param preserve [Boolean] when true, the owner, group, permissions and modified time
  #   are preserved on the copied file, defaults to false
  # @param noop [Boolean] when true does not execute the action
  # @param verbose [Boolean] when true log the action status to stdout
  # @param color [Symbol] the color name to use for logging
  # @param source_path [String, Pathname] the file path to copy file from
  # @param context [Object] the binding to use for the template
  #
  # source://tty-file//lib/tty/file.rb#289
  def copy_file(source_path, *args, context: T.unsafe(nil), force: T.unsafe(nil), skip: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), preserve: T.unsafe(nil), &block); end

  # Copy file metadata
  #
  # @api public
  # @param src_path [String] the source file path
  # @param dest_path [String] the destination file path
  #
  # source://tty-file//lib/tty/file.rb#327
  def copy_metadata(src_path, dest_path, **options); end

  # Create directory structure
  #
  # @api public
  # @example
  #   tree =
  #   "app" => [
  #   "README.md",
  #   ["Gemfile", "gem "tty-file""],
  #   "lib" => [
  #   "cli.rb",
  #   ["file_utils.rb", "require "tty-file""]
  #   ]
  #   "spec" => []
  #   ]
  #
  #   create_directory(tree)
  # @example
  #   create_directory("/path/to/dir")
  # @param force [Boolean] when true overwrites existing files, false by default
  # @param noop [Boolean] when true skips this action
  # @param verbose [Boolean] when true displays logging information
  # @param color [Symbol] the name for the color to format display message, :green by default
  # @param quiet [Boolean] when true leaves prompt output, otherwise clears
  # @param destination [String, Pathname, Hash] the path or data structure describing directory tree
  # @param context [Object] the context for template evaluation
  # @return [void]
  #
  # source://tty-file//lib/tty/file.rb#187
  def create_dir(destination, *args, context: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), force: T.unsafe(nil), skip: T.unsafe(nil), quiet: T.unsafe(nil)); end

  # Create directory structure
  #
  # @api public
  # @example
  #   tree =
  #   "app" => [
  #   "README.md",
  #   ["Gemfile", "gem "tty-file""],
  #   "lib" => [
  #   "cli.rb",
  #   ["file_utils.rb", "require "tty-file""]
  #   ]
  #   "spec" => []
  #   ]
  #
  #   create_directory(tree)
  # @example
  #   create_directory("/path/to/dir")
  # @param force [Boolean] when true overwrites existing files, false by default
  # @param noop [Boolean] when true skips this action
  # @param verbose [Boolean] when true displays logging information
  # @param color [Symbol] the name for the color to format display message, :green by default
  # @param quiet [Boolean] when true leaves prompt output, otherwise clears
  # @param destination [String, Pathname, Hash] the path or data structure describing directory tree
  # @param context [Object] the context for template evaluation
  # @return [void]
  #
  # source://tty-file//lib/tty/file.rb#187
  def create_directory(destination, *args, context: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), force: T.unsafe(nil), skip: T.unsafe(nil), quiet: T.unsafe(nil)); end

  # Create new file if doesn't exist
  #
  # @api public
  # @example
  #   create_file("doc/README.md", "# Title header")
  # @example
  #   create_file "doc/README.md" do
  #   "# Title Header"
  #   end
  # @param context [Object] the binding to use for the template
  # @param color [Symbol] the color name to use for logging
  # @param force [Boolean] forces ovewrite if conflict present
  # @param verbose [Boolean] when true log the action status to stdout
  # @param noop [Boolean] when true do not execute the action
  # @param skip [Boolean] when true skip the action
  # @param quiet [Boolean] when true leaves prompt output, otherwise clears
  # @param relative_path [String, Pathname]
  # @param content [String|nil] the content to add to file
  #
  # source://tty-file//lib/tty/file.rb#249
  def create_file(relative_path, *args, context: T.unsafe(nil), force: T.unsafe(nil), skip: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), quiet: T.unsafe(nil), &block); end

  # source://tty-file//lib/tty/file.rb#808
  def decorate(message, color); end

  # Diff files line by line
  #
  # @api public
  # @example
  #   diff(file_a, file_b, format: :old)
  # @param path_a [String, Pathname] the path to the original file
  # @param path_b [String, Pathname] the path to a new file
  # @param format [Symbol] the diffining output format
  # @param lines [Intger] the number of extra lines for the context
  # @param threshold [Integer] maximum file size in bytes
  #
  # source://tty-file//lib/tty/file.rb#416
  def diff(path_a, path_b, threshold: T.unsafe(nil), format: T.unsafe(nil), lines: T.unsafe(nil), header: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil)); end

  # source://tty-file//lib/tty/file.rb#462
  def diff_colors; end

  # Diff files line by line
  #
  # @api public
  # @example
  #   diff(file_a, file_b, format: :old)
  # @param path_a [String, Pathname] the path to the original file
  # @param path_b [String, Pathname] the path to a new file
  # @param format [Symbol] the diffining output format
  # @param lines [Intger] the number of extra lines for the context
  # @param threshold [Integer] maximum file size in bytes
  #
  # source://tty-file//lib/tty/file.rb#416
  def diff_files(path_a, path_b, threshold: T.unsafe(nil), format: T.unsafe(nil), lines: T.unsafe(nil), header: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil)); end

  # @api private
  #
  # source://tty-file//lib/tty/file.rb#449
  def diff_paths(file_a, file_b, temp_a, temp_b); end

  # Download the content from a given address and
  # save at the given relative destination. If block
  # is provided in place of destination, the content of
  # of the uri is yielded.
  #
  # @api public
  # @example
  #   download_file("https://gist.github.com/4701967",
  #   "doc/benchmarks")
  # @example
  #   download_file("https://gist.github.com/4701967") do |content|
  #   content.gsub("\n", " ")
  #   end
  # @param uri [String, Pathname] the URI address
  # @param dest [String, Pathname] the relative path to save
  # @param limit [Integer] the number of maximium redirects
  #
  # source://tty-file//lib/tty/file.rb#506
  def download_file(uri, *args, **options, &block); end

  # Escape glob character in a path
  #
  # @api public
  # @example
  #   escape_glob_path("foo[bar]") => "foo\\[bar\\]"
  # @param path [String] the path to escape
  # @return [String]
  #
  # source://tty-file//lib/tty/file.rb#786
  def escape_glob_path(path); end

  # Download the content from a given address and
  # save at the given relative destination. If block
  # is provided in place of destination, the content of
  # of the uri is yielded.
  #
  # @api public
  # @example
  #   download_file("https://gist.github.com/4701967",
  #   "doc/benchmarks")
  # @example
  #   download_file("https://gist.github.com/4701967") do |content|
  #   content.gsub("\n", " ")
  #   end
  # @param uri [String, Pathname] the URI address
  # @param dest [String, Pathname] the relative path to save
  # @param limit [Integer] the number of maximium redirects
  #
  # source://tty-file//lib/tty/file.rb#506
  def get_file(uri, *args, **options, &block); end

  # Replace content of a file matching string, returning false
  # when no substitutions were performed, true otherwise.
  #
  # @api public
  # @example
  #   replace_in_file("Gemfile", /gem 'rails'/) do |match|
  #   match = "gem 'hanami'"
  #   end
  # @example
  #   replace_in_file("Gemfile", /gem 'rails'/, "gem 'hanami'")
  # @param noop [Boolean] when true skip executing this action
  # @param color [Symbol] the name of the color used for displaying action
  # @param force [Boolean] replace content even if present
  # @param relative_path [String, Pathname]
  # @param verbose [Boolean] when true log status to stdout
  # @return [Boolean] true when replaced content, false otherwise
  #
  # source://tty-file//lib/tty/file.rb#677
  def gsub_file(relative_path, *args, verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), force: T.unsafe(nil), &block); end

  # Inject content into file at a given location
  #
  # @api public
  # @example
  #   inject_into_file("Gemfile", "gem 'tty'", after: "gem 'rack'\n")
  # @example
  #   inject_into_file("Gemfile", "gem 'tty'\n", "gem 'loaf'", after: "gem 'rack'\n")
  # @example
  #   inject_into_file("Gemfile", after: "gem 'rack'\n") do
  #   "gem 'tty'\n"
  #   end
  # @param force [Boolean] insert content more than once
  # @param verbose [Boolean] when true log status
  # @param color [Symbol] the color name used in displaying this action
  # @param noop [Boolean] when true skip perfomring this action
  # @param relative_path [String, Pathname]
  # @param before [String] the matching line to insert content before
  # @param after [String] the matching line to insert content after
  #
  # source://tty-file//lib/tty/file.rb#621
  def inject_into_file(relative_path, *args, verbose: T.unsafe(nil), color: T.unsafe(nil), after: T.unsafe(nil), before: T.unsafe(nil), force: T.unsafe(nil), noop: T.unsafe(nil), &block); end

  # Inject content into file at a given location
  #
  # @api public
  # @example
  #   inject_into_file("Gemfile", "gem 'tty'", after: "gem 'rack'\n")
  # @example
  #   inject_into_file("Gemfile", "gem 'tty'\n", "gem 'loaf'", after: "gem 'rack'\n")
  # @example
  #   inject_into_file("Gemfile", after: "gem 'rack'\n") do
  #   "gem 'tty'\n"
  #   end
  # @param force [Boolean] insert content more than once
  # @param verbose [Boolean] when true log status
  # @param color [Symbol] the color name used in displaying this action
  # @param noop [Boolean] when true skip perfomring this action
  # @param relative_path [String, Pathname]
  # @param before [String] the matching line to insert content before
  # @param after [String] the matching line to insert content after
  #
  # source://tty-file//lib/tty/file.rb#621
  def insert_into_file(relative_path, *args, verbose: T.unsafe(nil), color: T.unsafe(nil), after: T.unsafe(nil), before: T.unsafe(nil), force: T.unsafe(nil), noop: T.unsafe(nil), &block); end

  # Log file operation
  #
  # @api private
  #
  # source://tty-file//lib/tty/file.rb#816
  def log_status(cmd, message, verbose: T.unsafe(nil), color: T.unsafe(nil)); end

  # If content is not a path to a file, create a
  # tempfile and open it instead.
  #
  # @api private
  # @param object [String] a path to file or content
  #
  # source://tty-file//lib/tty/file.rb#840
  def open_tempfile_if_missing(object, &block); end

  # Prepend to a file
  #
  # @api public
  # @example
  #   prepend_to_file("Gemfile", "gem "tty"")
  # @example
  #   prepend_to_file("Gemfile") do
  #   "gem 'tty'"
  #   end
  # @param relative_path [String, Pathname]
  # @param content [Array[String]] the content to preped to file
  #
  # source://tty-file//lib/tty/file.rb#543
  def prepend_to_file(relative_path, *args, verbose: T.unsafe(nil), color: T.unsafe(nil), force: T.unsafe(nil), noop: T.unsafe(nil), &block); end

  # Read bytes from a file up to valid character
  #
  # @api public
  # @example
  #   TTY::File.read_to_char()
  # @param relative_path [String, Pathname] the path to file
  # @param bytes [Integer]
  # @return [String]
  #
  # source://tty-file//lib/tty/file.rb#80
  def read_to_char(relative_path, bytes = T.unsafe(nil), offset = T.unsafe(nil)); end

  # Remove a file or a directory at specified relative path.
  #
  # @api public
  # @example
  #   remove_file "doc/README.md"
  # @param relative_path [String, Pathname]
  # @param noop [Boolean] when true pretend to remove file
  # @param force [Boolean] when true remove file ignoring errors
  # @param verbose [Boolean] when true log status
  # @param secure [Boolean] when true check for secure removing
  #
  # source://tty-file//lib/tty/file.rb#719
  def remove_file(relative_path, *args, verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), force: T.unsafe(nil), secure: T.unsafe(nil)); end

  # Replace content of a file matching string, returning false
  # when no substitutions were performed, true otherwise.
  #
  # @api public
  # @example
  #   replace_in_file("Gemfile", /gem 'rails'/) do |match|
  #   match = "gem 'hanami'"
  #   end
  # @example
  #   replace_in_file("Gemfile", /gem 'rails'/, "gem 'hanami'")
  # @param noop [Boolean] when true skip executing this action
  # @param color [Symbol] the name of the color used for displaying action
  # @param force [Boolean] replace content even if present
  # @param relative_path [String, Pathname]
  # @param verbose [Boolean] when true log status to stdout
  # @return [Boolean] true when replaced content, false otherwise
  #
  # source://tty-file//lib/tty/file.rb#677
  def replace_in_file(relative_path, *args, verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), force: T.unsafe(nil), &block); end

  # Safely append to file checking if content is not already present
  #
  # @api public
  #
  # source://tty-file//lib/tty/file.rb#588
  def safe_append_to_file(relative_path, *args, **options, &block); end

  # Safely prepend to file checking if content is not already present
  #
  # @api public
  #
  # source://tty-file//lib/tty/file.rb#647
  def safe_inject_into_file(relative_path, *args, **options, &block); end

  # Safely prepend to file checking if content is not already present
  #
  # @api public
  #
  # source://tty-file//lib/tty/file.rb#554
  def safe_prepend_to_file(relative_path, *args, **options, &block); end

  # Provide the last number of lines from a file
  #
  # @api public
  # @example
  #   tail_file "filename"
  #   # =>  ["line 19", "line20", ... ]
  # @example
  #   tail_file "filename", lines: 15
  #   # =>  ["line 19", "line20", ... ]
  # @param relative_path [String, Pathname] the relative path to a file
  # @param lines [Integer] the number of lines to return from file
  # @param chunk_size [Integer] the size of the chunk to read
  # @return [Array[String]]
  #
  # source://tty-file//lib/tty/file.rb#750
  def tail_file(relative_path, lines: T.unsafe(nil), chunk_size: T.unsafe(nil), &block); end

  # Check if IO is attached to a terminal
  #
  # return [Boolean]
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-file//lib/tty/file.rb#863
  def tty?; end

  class << self
    # Create new file if doesn't exist
    #
    # @api public
    # @example
    #   create_file("doc/README.md", "# Title header")
    # @example
    #   create_file "doc/README.md" do
    #   "# Title Header"
    #   end
    # @param context [Object] the binding to use for the template
    # @param color [Symbol] the color name to use for logging
    # @param force [Boolean] forces ovewrite if conflict present
    # @param verbose [Boolean] when true log the action status to stdout
    # @param noop [Boolean] when true do not execute the action
    # @param skip [Boolean] when true skip the action
    # @param quiet [Boolean] when true leaves prompt output, otherwise clears
    # @param relative_path [String, Pathname]
    # @param content [String|nil] the content to add to file
    #
    # source://tty-file//lib/tty/file.rb#249
    def add_file(relative_path, *args, context: T.unsafe(nil), force: T.unsafe(nil), skip: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), quiet: T.unsafe(nil), &block); end

    # Append to a file
    #
    # @api public
    # @example
    #   append_to_file("Gemfile", "gem 'tty'")
    # @example
    #   append_to_file("Gemfile") do
    #   "gem 'tty'"
    #   end
    # @param relative_path [String, Pathname]
    # @param content [Array[String]] the content to append to file
    #
    # source://tty-file//lib/tty/file.rb#574
    def add_to_file(relative_path, *args, verbose: T.unsafe(nil), color: T.unsafe(nil), force: T.unsafe(nil), noop: T.unsafe(nil), &block); end

    # Append to a file
    #
    # @api public
    # @example
    #   append_to_file("Gemfile", "gem 'tty'")
    # @example
    #   append_to_file("Gemfile") do
    #   "gem 'tty'"
    #   end
    # @param relative_path [String, Pathname]
    # @param content [Array[String]] the content to append to file
    #
    # source://tty-file//lib/tty/file.rb#574
    def append_to_file(relative_path, *args, verbose: T.unsafe(nil), color: T.unsafe(nil), force: T.unsafe(nil), noop: T.unsafe(nil), &block); end

    # Check if file is binary
    #
    # @api public
    # @example
    #   binary?("Gemfile") # => false
    # @example
    #   binary?("image.jpg") # => true
    # @param relative_path [String, Pathname] the path to file to check
    # @return [Boolean] Returns `true` if the file is binary, `false` otherwise
    #
    # source://tty-file//lib/tty/file.rb#53
    def binary?(relative_path); end

    # Create checksum for a file, io or string objects
    #
    # @api public
    # @example
    #   checksum_file("/path/to/file")
    # @example
    #   checksum_file("Some string content", "md5")
    # @param source [File, IO, String, Pathname] the source to generate checksum for
    # @param mode [String]
    # @param noop [Boolean] when true skip this action
    # @return [String] the generated hex value
    #
    # source://tty-file//lib/tty/file.rb#114
    def checksum_file(source, *args, noop: T.unsafe(nil)); end

    # Change file permissions
    #
    # @api public
    # @example
    #   chmod("Gemilfe", TTY::File::U_R | TTY::File::U_W)
    # @example
    #   chmod("Gemfile", "u+x,g+x")
    # @example
    #   chmod("Gemfile", 0755)
    # @param verbose [Boolean] when true displays logging information
    # @param color [Symbol] the name for the color to format display message, :green by default
    # @param relative_path [String, Pathname] the string or path to a file
    # @param permisssions [Integer, String] the string or octal number for permissoins
    # @param noop [Boolean] when true skips this action
    #
    # source://tty-file//lib/tty/file.rb#144
    def chmod(relative_path, permissions, verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil)); end

    # Copy directory recursively from source to destination path
    #
    # Any files names wrapped within % sign will be expanded by
    # executing corresponding method and inserting its value.
    # Assuming the following directory structure:
    #
    #  app/
    #    %name%.rb
    #    command.rb.erb
    #    README.md
    #
    #  Invoking:
    #    copy_directory("app", "new_app")
    #  The following directory structure should be created where
    #  name resolves to "cli" value:
    #
    #  new_app/
    #    cli.rb
    #    command.rb
    #    README
    #
    # @api public
    # @example
    #   copy_directory("app", "new_app", recursive: false)
    # @example
    #   copy_directory("app", "new_app", exclude: /docs/)
    # @param source_path [String, Pathname] the source directory to copy files from
    # @param preserve [Boolean] when true, the owner, group, permissions and modified time
    #   are preserved on the copied file, defaults to false.
    # @param recursive [Boolean] when false, copies only top level files, defaults to true
    # @param exclude [Regexp] a regex that specifies files to ignore when copying
    #
    # source://tty-file//lib/tty/file.rb#372
    def copy_dir(source_path, *args, context: T.unsafe(nil), force: T.unsafe(nil), skip: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), preserve: T.unsafe(nil), recursive: T.unsafe(nil), exclude: T.unsafe(nil), &block); end

    # Copy directory recursively from source to destination path
    #
    # Any files names wrapped within % sign will be expanded by
    # executing corresponding method and inserting its value.
    # Assuming the following directory structure:
    #
    #  app/
    #    %name%.rb
    #    command.rb.erb
    #    README.md
    #
    #  Invoking:
    #    copy_directory("app", "new_app")
    #  The following directory structure should be created where
    #  name resolves to "cli" value:
    #
    #  new_app/
    #    cli.rb
    #    command.rb
    #    README
    #
    # @api public
    # @example
    #   copy_directory("app", "new_app", recursive: false)
    # @example
    #   copy_directory("app", "new_app", exclude: /docs/)
    # @param source_path [String, Pathname] the source directory to copy files from
    # @param preserve [Boolean] when true, the owner, group, permissions and modified time
    #   are preserved on the copied file, defaults to false.
    # @param recursive [Boolean] when false, copies only top level files, defaults to true
    # @param exclude [Regexp] a regex that specifies files to ignore when copying
    #
    # source://tty-file//lib/tty/file.rb#372
    def copy_directory(source_path, *args, context: T.unsafe(nil), force: T.unsafe(nil), skip: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), preserve: T.unsafe(nil), recursive: T.unsafe(nil), exclude: T.unsafe(nil), &block); end

    # Copy file from the relative source to the relative
    # destination running it through ERB.
    #
    # @api public
    # @example
    #   vars = OpenStruct.new
    #   vars[:name] = "foo"
    #   copy_file "templates/%name%.rb", "app/%name%.rb", context: vars
    # @example
    #   copy_file "templates/test.rb", "app/test.rb"
    # @param preserve [Boolean] when true, the owner, group, permissions and modified time
    #   are preserved on the copied file, defaults to false
    # @param noop [Boolean] when true does not execute the action
    # @param verbose [Boolean] when true log the action status to stdout
    # @param color [Symbol] the color name to use for logging
    # @param source_path [String, Pathname] the file path to copy file from
    # @param context [Object] the binding to use for the template
    #
    # source://tty-file//lib/tty/file.rb#289
    def copy_file(source_path, *args, context: T.unsafe(nil), force: T.unsafe(nil), skip: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), preserve: T.unsafe(nil), &block); end

    # Copy file metadata
    #
    # @api public
    # @param src_path [String] the source file path
    # @param dest_path [String] the destination file path
    #
    # source://tty-file//lib/tty/file.rb#327
    def copy_metadata(src_path, dest_path, **options); end

    # Create directory structure
    #
    # @api public
    # @example
    #   tree =
    #   "app" => [
    #   "README.md",
    #   ["Gemfile", "gem "tty-file""],
    #   "lib" => [
    #   "cli.rb",
    #   ["file_utils.rb", "require "tty-file""]
    #   ]
    #   "spec" => []
    #   ]
    #
    #   create_directory(tree)
    # @example
    #   create_directory("/path/to/dir")
    # @param force [Boolean] when true overwrites existing files, false by default
    # @param noop [Boolean] when true skips this action
    # @param verbose [Boolean] when true displays logging information
    # @param color [Symbol] the name for the color to format display message, :green by default
    # @param quiet [Boolean] when true leaves prompt output, otherwise clears
    # @param destination [String, Pathname, Hash] the path or data structure describing directory tree
    # @param context [Object] the context for template evaluation
    # @return [void]
    #
    # source://tty-file//lib/tty/file.rb#187
    def create_dir(destination, *args, context: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), force: T.unsafe(nil), skip: T.unsafe(nil), quiet: T.unsafe(nil)); end

    # Create directory structure
    #
    # @api public
    # @example
    #   tree =
    #   "app" => [
    #   "README.md",
    #   ["Gemfile", "gem "tty-file""],
    #   "lib" => [
    #   "cli.rb",
    #   ["file_utils.rb", "require "tty-file""]
    #   ]
    #   "spec" => []
    #   ]
    #
    #   create_directory(tree)
    # @example
    #   create_directory("/path/to/dir")
    # @param force [Boolean] when true overwrites existing files, false by default
    # @param noop [Boolean] when true skips this action
    # @param verbose [Boolean] when true displays logging information
    # @param color [Symbol] the name for the color to format display message, :green by default
    # @param quiet [Boolean] when true leaves prompt output, otherwise clears
    # @param destination [String, Pathname, Hash] the path or data structure describing directory tree
    # @param context [Object] the context for template evaluation
    # @return [void]
    #
    # source://tty-file//lib/tty/file.rb#187
    def create_directory(destination, *args, context: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), force: T.unsafe(nil), skip: T.unsafe(nil), quiet: T.unsafe(nil)); end

    # Create new file if doesn't exist
    #
    # @api public
    # @example
    #   create_file("doc/README.md", "# Title header")
    # @example
    #   create_file "doc/README.md" do
    #   "# Title Header"
    #   end
    # @param context [Object] the binding to use for the template
    # @param color [Symbol] the color name to use for logging
    # @param force [Boolean] forces ovewrite if conflict present
    # @param verbose [Boolean] when true log the action status to stdout
    # @param noop [Boolean] when true do not execute the action
    # @param skip [Boolean] when true skip the action
    # @param quiet [Boolean] when true leaves prompt output, otherwise clears
    # @param relative_path [String, Pathname]
    # @param content [String|nil] the content to add to file
    #
    # source://tty-file//lib/tty/file.rb#249
    def create_file(relative_path, *args, context: T.unsafe(nil), force: T.unsafe(nil), skip: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), quiet: T.unsafe(nil), &block); end

    # Diff files line by line
    #
    # @api public
    # @example
    #   diff(file_a, file_b, format: :old)
    # @param path_a [String, Pathname] the path to the original file
    # @param path_b [String, Pathname] the path to a new file
    # @param format [Symbol] the diffining output format
    # @param lines [Intger] the number of extra lines for the context
    # @param threshold [Integer] maximum file size in bytes
    #
    # source://tty-file//lib/tty/file.rb#416
    def diff(path_a, path_b, threshold: T.unsafe(nil), format: T.unsafe(nil), lines: T.unsafe(nil), header: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil)); end

    # Diff files line by line
    #
    # @api public
    # @example
    #   diff(file_a, file_b, format: :old)
    # @param path_a [String, Pathname] the path to the original file
    # @param path_b [String, Pathname] the path to a new file
    # @param format [Symbol] the diffining output format
    # @param lines [Intger] the number of extra lines for the context
    # @param threshold [Integer] maximum file size in bytes
    #
    # source://tty-file//lib/tty/file.rb#416
    def diff_files(path_a, path_b, threshold: T.unsafe(nil), format: T.unsafe(nil), lines: T.unsafe(nil), header: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil)); end

    # Download the content from a given address and
    # save at the given relative destination. If block
    # is provided in place of destination, the content of
    # of the uri is yielded.
    #
    # @api public
    # @example
    #   download_file("https://gist.github.com/4701967",
    #   "doc/benchmarks")
    # @example
    #   download_file("https://gist.github.com/4701967") do |content|
    #   content.gsub("\n", " ")
    #   end
    # @param uri [String, Pathname] the URI address
    # @param dest [String, Pathname] the relative path to save
    # @param limit [Integer] the number of maximium redirects
    #
    # source://tty-file//lib/tty/file.rb#506
    def download_file(uri, *args, **options, &block); end

    # Escape glob character in a path
    #
    # @api public
    # @example
    #   escape_glob_path("foo[bar]") => "foo\\[bar\\]"
    # @param path [String] the path to escape
    # @return [String]
    #
    # source://tty-file//lib/tty/file.rb#786
    def escape_glob_path(path); end

    # Download the content from a given address and
    # save at the given relative destination. If block
    # is provided in place of destination, the content of
    # of the uri is yielded.
    #
    # @api public
    # @example
    #   download_file("https://gist.github.com/4701967",
    #   "doc/benchmarks")
    # @example
    #   download_file("https://gist.github.com/4701967") do |content|
    #   content.gsub("\n", " ")
    #   end
    # @param uri [String, Pathname] the URI address
    # @param dest [String, Pathname] the relative path to save
    # @param limit [Integer] the number of maximium redirects
    #
    # source://tty-file//lib/tty/file.rb#506
    def get_file(uri, *args, **options, &block); end

    # Replace content of a file matching string, returning false
    # when no substitutions were performed, true otherwise.
    #
    # @api public
    # @example
    #   replace_in_file("Gemfile", /gem 'rails'/) do |match|
    #   match = "gem 'hanami'"
    #   end
    # @example
    #   replace_in_file("Gemfile", /gem 'rails'/, "gem 'hanami'")
    # @param noop [Boolean] when true skip executing this action
    # @param color [Symbol] the name of the color used for displaying action
    # @param force [Boolean] replace content even if present
    # @param relative_path [String, Pathname]
    # @param verbose [Boolean] when true log status to stdout
    # @return [Boolean] true when replaced content, false otherwise
    #
    # source://tty-file//lib/tty/file.rb#677
    def gsub_file(relative_path, *args, verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), force: T.unsafe(nil), &block); end

    # Inject content into file at a given location
    #
    # @api public
    # @example
    #   inject_into_file("Gemfile", "gem 'tty'", after: "gem 'rack'\n")
    # @example
    #   inject_into_file("Gemfile", "gem 'tty'\n", "gem 'loaf'", after: "gem 'rack'\n")
    # @example
    #   inject_into_file("Gemfile", after: "gem 'rack'\n") do
    #   "gem 'tty'\n"
    #   end
    # @param force [Boolean] insert content more than once
    # @param verbose [Boolean] when true log status
    # @param color [Symbol] the color name used in displaying this action
    # @param noop [Boolean] when true skip perfomring this action
    # @param relative_path [String, Pathname]
    # @param before [String] the matching line to insert content before
    # @param after [String] the matching line to insert content after
    #
    # source://tty-file//lib/tty/file.rb#621
    def inject_into_file(relative_path, *args, verbose: T.unsafe(nil), color: T.unsafe(nil), after: T.unsafe(nil), before: T.unsafe(nil), force: T.unsafe(nil), noop: T.unsafe(nil), &block); end

    # Inject content into file at a given location
    #
    # @api public
    # @example
    #   inject_into_file("Gemfile", "gem 'tty'", after: "gem 'rack'\n")
    # @example
    #   inject_into_file("Gemfile", "gem 'tty'\n", "gem 'loaf'", after: "gem 'rack'\n")
    # @example
    #   inject_into_file("Gemfile", after: "gem 'rack'\n") do
    #   "gem 'tty'\n"
    #   end
    # @param force [Boolean] insert content more than once
    # @param verbose [Boolean] when true log status
    # @param color [Symbol] the color name used in displaying this action
    # @param noop [Boolean] when true skip perfomring this action
    # @param relative_path [String, Pathname]
    # @param before [String] the matching line to insert content before
    # @param after [String] the matching line to insert content after
    #
    # source://tty-file//lib/tty/file.rb#621
    def insert_into_file(relative_path, *args, verbose: T.unsafe(nil), color: T.unsafe(nil), after: T.unsafe(nil), before: T.unsafe(nil), force: T.unsafe(nil), noop: T.unsafe(nil), &block); end

    # Prepend to a file
    #
    # @api public
    # @example
    #   prepend_to_file("Gemfile", "gem "tty"")
    # @example
    #   prepend_to_file("Gemfile") do
    #   "gem 'tty'"
    #   end
    # @param relative_path [String, Pathname]
    # @param content [Array[String]] the content to preped to file
    #
    # source://tty-file//lib/tty/file.rb#543
    def prepend_to_file(relative_path, *args, verbose: T.unsafe(nil), color: T.unsafe(nil), force: T.unsafe(nil), noop: T.unsafe(nil), &block); end

    # source://tty-file//lib/tty/file.rb#17
    def private_module_function(method); end

    # Read bytes from a file up to valid character
    #
    # @api public
    # @example
    #   TTY::File.read_to_char()
    # @param relative_path [String, Pathname] the path to file
    # @param bytes [Integer]
    # @return [String]
    #
    # source://tty-file//lib/tty/file.rb#80
    def read_to_char(relative_path, bytes = T.unsafe(nil), offset = T.unsafe(nil)); end

    # Remove a file or a directory at specified relative path.
    #
    # @api public
    # @example
    #   remove_file "doc/README.md"
    # @param relative_path [String, Pathname]
    # @param noop [Boolean] when true pretend to remove file
    # @param force [Boolean] when true remove file ignoring errors
    # @param verbose [Boolean] when true log status
    # @param secure [Boolean] when true check for secure removing
    #
    # source://tty-file//lib/tty/file.rb#719
    def remove_file(relative_path, *args, verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), force: T.unsafe(nil), secure: T.unsafe(nil)); end

    # Replace content of a file matching string, returning false
    # when no substitutions were performed, true otherwise.
    #
    # @api public
    # @example
    #   replace_in_file("Gemfile", /gem 'rails'/) do |match|
    #   match = "gem 'hanami'"
    #   end
    # @example
    #   replace_in_file("Gemfile", /gem 'rails'/, "gem 'hanami'")
    # @param noop [Boolean] when true skip executing this action
    # @param color [Symbol] the name of the color used for displaying action
    # @param force [Boolean] replace content even if present
    # @param relative_path [String, Pathname]
    # @param verbose [Boolean] when true log status to stdout
    # @return [Boolean] true when replaced content, false otherwise
    #
    # source://tty-file//lib/tty/file.rb#677
    def replace_in_file(relative_path, *args, verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), force: T.unsafe(nil), &block); end

    # Safely append to file checking if content is not already present
    #
    # @api public
    #
    # source://tty-file//lib/tty/file.rb#588
    def safe_append_to_file(relative_path, *args, **options, &block); end

    # Safely prepend to file checking if content is not already present
    #
    # @api public
    #
    # source://tty-file//lib/tty/file.rb#647
    def safe_inject_into_file(relative_path, *args, **options, &block); end

    # Safely prepend to file checking if content is not already present
    #
    # @api public
    #
    # source://tty-file//lib/tty/file.rb#554
    def safe_prepend_to_file(relative_path, *args, **options, &block); end

    # Provide the last number of lines from a file
    #
    # @api public
    # @example
    #   tail_file "filename"
    #   # =>  ["line 19", "line20", ... ]
    # @example
    #   tail_file "filename", lines: 15
    #   # =>  ["line 19", "line20", ... ]
    # @param relative_path [String, Pathname] the relative path to a file
    # @param lines [Integer] the number of lines to return from file
    # @param chunk_size [Integer] the size of the chunk to read
    # @return [Array[String]]
    #
    # source://tty-file//lib/tty/file.rb#750
    def tail_file(relative_path, lines: T.unsafe(nil), chunk_size: T.unsafe(nil), &block); end

    private

    # source://tty-file//lib/tty/file.rb#474
    def check_binary_or_large(file, threshold); end

    # source://tty-file//lib/tty/file.rb#798
    def check_path(path); end

    # source://tty-file//lib/tty/file.rb#808
    def decorate(message, color); end

    # source://tty-file//lib/tty/file.rb#462
    def diff_colors; end

    # source://tty-file//lib/tty/file.rb#449
    def diff_paths(file_a, file_b, temp_a, temp_b); end

    # source://tty-file//lib/tty/file.rb#816
    def log_status(cmd, message, verbose: T.unsafe(nil), color: T.unsafe(nil)); end

    # source://tty-file//lib/tty/file.rb#840
    def open_tempfile_if_missing(object, &block); end

    # source://tty-file//lib/tty/file.rb#863
    def tty?; end
  end
end

# source://tty-file//lib/tty/file.rb#34
TTY::File::A_R = T.let(T.unsafe(nil), Integer)

# source://tty-file//lib/tty/file.rb#35
TTY::File::A_W = T.let(T.unsafe(nil), Integer)

# source://tty-file//lib/tty/file.rb#36
TTY::File::A_X = T.let(T.unsafe(nil), Integer)

# source://tty-file//lib/tty/file/compare_files.rb#7
class TTY::File::CompareFiles
  extend ::Forwardable

  # @return [CompareFiles] a new instance of CompareFiles
  #
  # source://tty-file//lib/tty/file/compare_files.rb#10
  def initialize(format: T.unsafe(nil), header: T.unsafe(nil), context_lines: T.unsafe(nil), verbose: T.unsafe(nil), color: T.unsafe(nil), noop: T.unsafe(nil), diff_colors: T.unsafe(nil)); end

  # Compare files
  #
  # @api public
  #
  # source://tty-file//lib/tty/file/compare_files.rb#24
  def call(file_a, file_b, file_a_path, file_b_path); end

  private

  # @api private
  #
  # source://tty-file//lib/tty/file/compare_files.rb#52
  def color_diff_lines(hunks); end
end

# source://tty-file//lib/tty/file/create_file.rb#7
class TTY::File::CreateFile
  # @return [CreateFile] a new instance of CreateFile
  #
  # source://tty-file//lib/tty/file/create_file.rb#11
  def initialize(base, relative_path, content, context: T.unsafe(nil), force: T.unsafe(nil), skip: T.unsafe(nil), verbose: T.unsafe(nil), noop: T.unsafe(nil), color: T.unsafe(nil), quiet: T.unsafe(nil)); end

  # Returns the value of attribute base.
  #
  # source://tty-file//lib/tty/file/create_file.rb#9
  def base; end

  # Create a file
  #
  # @api public
  #
  # source://tty-file//lib/tty/file/create_file.rb#37
  def call; end

  # Returns the value of attribute content.
  #
  # source://tty-file//lib/tty/file/create_file.rb#9
  def content; end

  # Returns the value of attribute context.
  #
  # source://tty-file//lib/tty/file/create_file.rb#9
  def context; end

  # @return [Boolean]
  #
  # source://tty-file//lib/tty/file/create_file.rb#26
  def exist?; end

  # @return [Boolean]
  #
  # source://tty-file//lib/tty/file/create_file.rb#30
  def identical?; end

  # Returns the value of attribute prompt.
  #
  # source://tty-file//lib/tty/file/create_file.rb#9
  def prompt; end

  # Returns the value of attribute relative_path.
  #
  # source://tty-file//lib/tty/file/create_file.rb#9
  def relative_path; end

  protected

  # source://tty-file//lib/tty/file/create_file.rb#47
  def convert_encoded_path(filename); end

  # Check if file already exists and ask for user input on collision
  #
  # @api private
  #
  # source://tty-file//lib/tty/file/create_file.rb#61
  def detect_collision; end

  # Display conflict resolution menu and gather answer
  #
  # @api private
  #
  # source://tty-file//lib/tty/file/create_file.rb#91
  def file_collision(relative_path, content); end

  # @api private
  #
  # source://tty-file//lib/tty/file/create_file.rb#112
  def interpret_answer(answer); end

  # Notify console about performed action
  #
  # @api private
  #
  # source://tty-file//lib/tty/file/create_file.rb#83
  def notify(name, color); end

  # Display difference between old and new file
  #
  # @api private
  #
  # source://tty-file//lib/tty/file/create_file.rb#107
  def show_diff; end
end

# source://tty-file//lib/tty/file/differ.rb#8
class TTY::File::Differ
  # Create a Differ
  #
  # @api public
  # @return [Differ] a new instance of Differ
  #
  # source://tty-file//lib/tty/file/differ.rb#12
  def initialize(format: T.unsafe(nil), context_lines: T.unsafe(nil)); end

  # Diff add char
  #
  # @api public
  #
  # source://tty-file//lib/tty/file/differ.rb#37
  def add_char; end

  # Find character difference between two strings
  #
  # @api public
  # @return [String] the difference between content or empty if no
  #   difference found
  #
  # source://tty-file//lib/tty/file/differ.rb#24
  def call(string_a, string_b); end

  # Diff delete char
  #
  # @api public
  #
  # source://tty-file//lib/tty/file/differ.rb#51
  def delete_char; end

  private

  # @api private
  #
  # source://tty-file//lib/tty/file/differ.rb#65
  def convert_to_lines(string); end

  # @api private
  #
  # source://tty-file//lib/tty/file/differ.rb#70
  def extract_hunks(diffs, string_a_lines, string_b_lines); end

  # @api private
  #
  # source://tty-file//lib/tty/file/differ.rb#82
  def format_hunks(hunks); end
end

# source://tty-file//lib/tty/file/digest_file.rb#8
class TTY::File::DigestFile
  # @return [DigestFile] a new instance of DigestFile
  #
  # source://tty-file//lib/tty/file/digest_file.rb#11
  def initialize(source, mode); end

  # source://tty-file//lib/tty/file/digest_file.rb#16
  def call; end

  # source://tty-file//lib/tty/file/digest_file.rb#30
  def checksum_io(io, digest); end

  # Returns the value of attribute source.
  #
  # source://tty-file//lib/tty/file/digest_file.rb#9
  def source; end
end

# source://tty-file//lib/tty/file/download_file.rb#8
class TTY::File::DownloadError < ::StandardError; end

# source://tty-file//lib/tty/file/download_file.rb#10
class TTY::File::DownloadFile
  # @return [DownloadFile] a new instance of DownloadFile
  #
  # source://tty-file//lib/tty/file/download_file.rb#17
  def initialize(url, dest_path, limit: T.unsafe(nil)); end

  # Download a file
  #
  # @api public
  #
  # source://tty-file//lib/tty/file/download_file.rb#26
  def call; end

  # Returns the value of attribute dest_path.
  #
  # source://tty-file//lib/tty/file/download_file.rb#11
  def dest_path; end

  # Returns the value of attribute limit.
  #
  # source://tty-file//lib/tty/file/download_file.rb#11
  def limit; end

  # Returns the value of attribute uri.
  #
  # source://tty-file//lib/tty/file/download_file.rb#11
  def uri; end

  private

  # @api private
  # @raise [DownloadError]
  #
  # source://tty-file//lib/tty/file/download_file.rb#33
  def download(uri, path, limit); end
end

# source://tty-file//lib/tty/file/download_file.rb#13
TTY::File::DownloadFile::DEFAULT_REDIRECTS = T.let(T.unsafe(nil), Integer)

# source://tty-file//lib/tty/file.rb#28
TTY::File::G_R = T.let(T.unsafe(nil), Integer)

# source://tty-file//lib/tty/file.rb#29
TTY::File::G_W = T.let(T.unsafe(nil), Integer)

# source://tty-file//lib/tty/file.rb#30
TTY::File::G_X = T.let(T.unsafe(nil), Integer)

# Invalid path erorr
#
# source://tty-file//lib/tty/file.rb#22
class TTY::File::InvalidPathError < ::ArgumentError; end

# source://tty-file//lib/tty/file.rb#31
TTY::File::O_R = T.let(T.unsafe(nil), Integer)

# source://tty-file//lib/tty/file.rb#32
TTY::File::O_W = T.let(T.unsafe(nil), Integer)

# source://tty-file//lib/tty/file.rb#33
TTY::File::O_X = T.let(T.unsafe(nil), Integer)

# File permissions
#
# source://tty-file//lib/tty/file.rb#25
TTY::File::U_R = T.let(T.unsafe(nil), Integer)

# source://tty-file//lib/tty/file.rb#26
TTY::File::U_W = T.let(T.unsafe(nil), Integer)

# source://tty-file//lib/tty/file.rb#27
TTY::File::U_X = T.let(T.unsafe(nil), Integer)

# source://tty-file//lib/tty/file/version.rb#5
TTY::File::VERSION = T.let(T.unsafe(nil), String)
